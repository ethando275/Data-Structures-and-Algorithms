

netid => ed8205
assignment => Kd_Tree
file01 => @/n/fs/tigerfile/Files/COS226_S2023/Kd_Tree/submissions/cd1c0c5d92190236d3f1a7710e4221ef/readme.txt;filename=20230327103436/readme.txt
file02 => @/n/fs/tigerfile/Files/COS226_S2023/Kd_Tree/submissions/cd1c0c5d92190236d3f1a7710e4221ef/KdTreeST.java;filename=20230327191355/KdTreeST.java
file03 => @/n/fs/tigerfile/Files/COS226_S2023/Kd_Tree/submissions/cd1c0c5d92190236d3f1a7710e4221ef/PointST.java;filename=20230327191401/PointST.java
The following files were submitted:
----------------------------------
 9.5K Mar 27 19:13 KdTreeST.java
 4.5K Mar 27 19:14 PointST.java
 3.7K Mar 27 10:34 readme.txt


*** The acknowledgments.txt file has NOT been submitted.***
*** This assessment will NOT be graded until the acknowledgments.txt file is submitted.***


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointST.java
*-----------------------------------------------------------

% javac KdTreeST.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointST:

KdTreeST:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M C NP_NULL_ON_SOME_PATH NP: Dereferences the variable 'current', but its value might be null on some execution branch.  Dereferenced at KdTreeST.java:[line 92]
SpotBugs ends with 1 warning.


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTreeST.java:224: Line length is 88 characters (max allowed is 87). [LineLength]
[WARN] KdTreeST.java:256:31: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:256:35: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:257:31: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:257:35: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:258:31: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:258:35: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:259:31: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:259:35: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:260:31: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:260:35: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:261:71: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
Checkstyle ends with 0 errors and 12 warnings.

% custom checkstyle checks for PointST.java
*-----------------------------------------------------------
Checkstyle ends with 1 errors.
[ERROR] PointST.java:70: Do not create more than one redâ€“black BST in this program. [Performance]
[WARN] PointST.java:70:54: Do not call 'RedBlackBST()' in 'range()'. Inserting n keys into an initially empty red-black BST takes n log n time. [Performance]
Checkstyle ends with 1 error and 1 warning.

% custom checkstyle checks for KdTreeST.java
*-----------------------------------------------------------

% custom checkstyle checks for readme.txt
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointST
*-----------------------------------------------------------
Running 16 total tests.

In the tests below, we consider two classes of points.
  * Distinct points: no two points have same x- and y-coordinates
  * General points:  no restrictions on the x- or y-coordinates of the points

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert n random distinct points; check size() and isEmpty() after each insertion
  * 2 random distinct points in a 1-by-1 grid
  * 64 random distinct points in a 8-by-8 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 128-by-128 grid
  * 5000 random distinct points in a 1024-by-1024 grid
  * 50000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1b: insert n random points; check size() and isEmpty() after each insertion
         (size may be less than n because of duplicates)
  * 5 random general points in a 1-by-1 grid
  * 50 random general points in a 8-by-8 grid
  * 100 random general points in a 16-by-16 grid
  * 1000 random general points in a 128-by-128 grid
  * 5000 random general points in a 1024-by-1024 grid
  * 50000 random general points in a 65536-by-65536 grid
==> passed

Test 2a: insert n random distinct points; check contains() with random query points
  * 2 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2b: insert n random points; check contains() with random query points
  * 1 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 10000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
  * 100000 random general points in a 65536-by-65536 grid
==> passed

Test 3a: insert random distinct points; check get() with random query points
  * 2 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 64-by-64 grid
  * 10000 random distinct points in a 128-by-128 grid
==> passed

Test 3b: insert random points; check get() with random query points
  * 2 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 16-by-16 grid
  * 1000 random general points in a 64-by-64 grid
  * 10000 random general points in a 128-by-128 grid
==> passed

Test 4a: insert random distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==> passed

Test 4b: insert random points; check nearest() with random query points
  * 10 random general points in a 4-by-4 grid
  * 15 random general points in a 8-by-8 grid
  * 20 random general points in a 16-by-16 grid
  * 100 random general points in a 32-by-32 grid
  * 10000 random general points in a 65536-by-65536 grid
==> passed

Test 5a: insert n random distinct points and call points()
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 128-by-128 grid
  * 1000 random distinct points in a 1024-by-1024 grid
==> passed

Test 5b: insert n random points and call points()
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 1000 random general points in a 16-by-16 grid
  * 1000 random general points in a 128-by-128 grid
  * 1000 random general points in a 1024-by-1024 grid
==> passed

Test 6a: insert random distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 6b: insert random points; check range() with random query rectangles
  * 2 random general points and random rectangles in a 2-by-2 grid
  * 10 random general points and random rectangles in a 4-by-4 grid
  * 20 random general points and random rectangles in a 8-by-8 grid
  * 100 random general points and random rectangles in a 16-by-16 grid
  * 1000 random general points and random rectangles in a 64-by-64 grid
  * 10000 random general points and random rectangles in a 128-by-128 grid
==> passed

Test 7: check with no points
 * size() and isEmpty()
 * points()
 * contains()
 * get()
 * nearest()
 * range()
==> passed

Test 8: call methods with null arguments
  * either argument to put() is null
  * argument to get() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9: check intermixed sequence of calls to put(), isEmpty(), size(),
        get(), contains(), range(), nearest(), and points() with
        probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
==> passed

Test 10: check that two PointST objects can be created at the same time
==> passed


Total: 16/16 tests passed!


================================================================
Testing correctness of KdTreeST
*-----------------------------------------------------------
Running 36 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
  * input25.txt
  * input50.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check points()
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check points()
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 1000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check points()
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 128-by-128 grid
  * 1000 random distinct points in a 1024-by-1024 grid
  * 1000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check points()
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 1000 random general points in a 16-by-16 grid
  * 1000 random general points in a 128-by-128 grid
  * 1000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check contains() with random query points
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 3d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 4a: insert points from file; check get() with random query points
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check get() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 4c: insert distinct points; check get() with random query points
  * 2 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 64-by-64 grid
  * 10000 random distinct points in a 128-by-128 grid
==> passed

Test 4d: insert general points; check get() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 5a: insert points from file; check range() with random query rectangles
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 5b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.125, 0.6875] x [0.1875, 0.625]
    - sequence of points inserted: 
      A  0.75 0.5625
      B  0.625 1.0
      C  0.9375 0.375
      D  0.25 0.125
      E  0.8125 0.9375
      F  0.0625 0.75
      G  0.4375 0.3125
      H  0.0 0.8125
      I  0.1875 0.25
      J  0.375 0.4375
    - student   range():  I G 
    - reference range():  I G J 

  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.1015625, 0.83984375] x [0.64453125, 0.9609375]
    - student   range():  A 
    - reference range():  A Q P X O G N H W J D T C R T R D B L Z S A D P G I ...

  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.386566162109375, 0.82269287109375] x [0.1280517578125, 0.9500732421875]
    - student   range():  C B H R 
    - reference range():  C L M E F K Y K D C V P X D O S P C Y Z C L H B E O ...

==> FAILED

Test 5c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 1.0] x [0.5, 0.75]
    - sequence of points inserted: 
      A  0.75 1.0
      B  0.75 0.25
      C  1.0 1.0
      D  1.0 0.25
      E  0.5 0.5
      F  0.0 0.0
      G  0.25 0.75
      H  0.25 0.25
      I  0.75 0.75
      J  0.25 0.5
    - student   range():  E I 
    - reference range():  E G J I 

  * 20 random distinct points and random rectangles in a 8-by-8 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.5, 1.0] x [0.75, 1.0]
    - sequence of points inserted: 
      A  0.5 0.625
      B  0.625 0.0
      C  0.5 0.125
      D  0.375 0.125
      E  0.0 0.875
      F  0.875 0.875
      G  0.875 1.0
      H  0.25 0.375
      I  0.625 0.75
      J  0.5 0.875
      K  0.75 0.625
      L  0.75 0.375
      M  0.375 1.0
      N  1.0 0.25
      O  0.25 0.625
      P  0.0 0.75
      Q  0.375 0.25
      R  0.125 0.25
      S  0.875 0.5
      T  0.625 0.125
    - student   range():  F 
    - reference range():  F I G J 

  * 100 random distinct points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.3125, 0.875] x [0.5, 0.75]
    - student   range():  D 
    - reference range():  D F A K N F S O G R D M J Z D 

  * 1000 random distinct points and random rectangles in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.078125, 0.75] x [0.171875, 0.265625]
    - student   range():  A 
    - reference range():  A E P G Z Y P S G R K S G A U V P P Z Q L F T N G K ...

  * 10000 random distinct points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.59375, 0.6796875] x [0.5, 0.953125]
    - student   range():  W T W H J E I 
    - reference range():  W H S E V Q B K S O M C D J O Y C Z Z V B B R V P C ...

==> FAILED

Test 5d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 0.5] x [0.0, 0.5]
    - student   range():  O 
    - reference range():  O H Q Z 

  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.375, 0.5625] x [0.125, 0.75]
    - student   range():  P 
    - reference range():  P D X B K O P Q X T N H W G Z O H F J S Y I W J K B ...

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.265625, 0.921875] x [0.2265625, 0.8828125]
    - student   range():  A 
    - reference range():  A C B B P M W J S H P U G O A F W L Z U H P Y L V S ...

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.8779296875, 0.97265625] x [0.6533203125, 0.7451171875]
    - student   range():  Q L P T E 
    - reference range():  Q L P Y B T R N E H F G R J N J N M S E G R E G F Q ...

==> FAILED

Test 5e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 6a: insert points from file; check range() with random query rectangles
         and check traversal of k-d tree
  * input5.txt
    - student range() returns wrong set of points
    - student   range():  B 
    - reference range():  B D 
    - performs incorrect traversal of k-d tree during call to range()
    - query rectangle = [0.26, 0.74] x [0.29, 0.76]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student k-d tree nodes involved in calls to Point2D methods:
      A B E 
    - reference k-d tree nodes involved in calls to Point2D methods:
      A B C D E 
    - failed on trial 7 of 1000

  * input10.txt
    - student range() returns correct set of points
    - student   range():  C 
    - reference range():  C 
    - performs incorrect traversal of k-d tree during call to range()
    - query rectangle = [0.11, 0.63] x [0.54, 0.6]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student k-d tree nodes involved in calls to Point2D methods:
      A C B H I 
    - reference k-d tree nodes involved in calls to Point2D methods:
      A C D E F B H I 
    - failed on trial 2 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of k-d tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
    - student range() returns correct set of points
    - student   range():  D 
    - reference range():  D 
    - performs incorrect traversal of k-d tree during call to range()
    - query rectangle = [0.625, 1.0] x [0.0, 1.0]
    - sequence of points inserted: 
      A  0.125 0.25
      B  0.0 0.375
      C  0.375 0.5
      D  0.75 0.75
      E  0.5 0.125
      F  0.25 0.625
    - student k-d tree nodes involved in calls to Point2D methods:
      A C E D 
    - reference k-d tree nodes involved in calls to Point2D methods:
      A C E D F 
    - failed on trial 2 of 1000

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
    - student range() returns wrong set of points
    - student   range():  C 
    - reference range():  C G I 
    - performs incorrect traversal of k-d tree during call to range()
    - query rectangle = [0.25, 0.625] x [0.0, 0.75]
    - sequence of points inserted: 
      A  0.0625 0.125
      B  0.6875 0.1875
      C  0.375 0.4375
      D  0.1875 0.375
      E  0.4375 0.8125
      F  0.75 0.875
      G  0.3125 0.5625
      H  0.9375 0.6875
      I  0.5625 0.25
      J  1.0 0.0625
    - student k-d tree nodes involved in calls to Point2D methods:
      A B J C 
    - reference k-d tree nodes involved in calls to Point2D methods:
      A B J C D G E H I 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
    - student range() returns wrong set of points
    - student   range():  C 
    - reference range():  C G S N M 
    - performs incorrect traversal of k-d tree during call to range()
    - query rectangle = [0.09375, 0.625] x [0.375, 1.0]
    - sequence of points inserted: 
      A  0.15625 0.125
      B  0.40625 0.3125
      C  0.28125 0.875
      D  0.75 0.5
      E  0.6875 0.1875
      F  0.53125 0.09375
      G  0.25 0.625
      H  0.71875 0.84375
      I  0.84375 0.25
      J  0.59375 0.34375
      K  0.0 0.0625
      L  0.875 0.71875
      M  0.375 0.6875
      N  0.5 0.46875
      O  0.34375 0.21875
      P  0.78125 0.5625
      Q  0.8125 0.8125
      R  0.0625 0.78125
      S  0.1875 0.9375
      T  0.03125 0.15625
    - student k-d tree nodes involved in calls to Point2D methods:
      A K R B C 
    - reference k-d tree nodes involved in calls to Point2D methods:
      A K R B C G S D J N H M 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
    - student range() returns wrong set of points
    - student   range():  M 
    - reference range():  M S 
    - performs incorrect traversal of k-d tree during call to range()
    - query rectangle = [0.3125, 0.6875] x [0.234375, 0.515625]
    - number of entries in student   solution: 10
    - number of entries in reference solution: 14
    - 4 missing entries in student solution, including:
      '(0.625, 0.609375)'

    - failed on trial 1 of 1000

==> FAILED

Test 7a: insert points from file; check nearest() with random query points
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 7b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 30 random non-degenerate points in a 64-by-64 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 7c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==> passed

Test 7d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 8a: insert points from file; check nearest() with random query points
         and check traversal of k-d tree
  * input5.txt
    - student   nearest() = (0.9, 0.6)
    - reference nearest() = (0.9, 0.6)
    - performs incorrect traversal of k-d tree during call to nearest()
    - query point = (0.99, 0.81)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of k-d tree nodes involved in calls to Point2D methods:
      E A 
    - reference sequence of k-d tree nodes involved in calls to Point2D methods:
      A E 
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.226, 0.577)
    - reference nearest() = (0.226, 0.577)
    - performs incorrect traversal of k-d tree during call to nearest()
    - query point = (0.21, 0.63)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of k-d tree nodes involved in calls to Point2D methods:
      C A F D E 
    - reference sequence of k-d tree nodes involved in calls to Point2D methods:
      A C F D 
    - failed on trial 1 of 1000

==> FAILED

Test 8b: insert non-degenerate points; check nearest() with random query points
         and check traversal of k-d tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.5, 0.5)
    - reference nearest() = (0.5, 0.5)
    - performs incorrect traversal of k-d tree during call to nearest()
    - query point = (0.625, 0.625)
    - sequence of points inserted: 
      A  0.125 0.0
      B  0.5 0.5
      C  0.875 0.875
      D  1.0 1.0
      E  0.25 0.375
    - student sequence of k-d tree nodes involved in calls to Point2D methods:
      B A C E 
    - reference sequence of k-d tree nodes involved in calls to Point2D methods:
      A B C E 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.6875, 0.5)
    - reference nearest() = (0.6875, 0.5)
    - performs incorrect traversal of k-d tree during call to nearest()
    - query point = (0.9375, 0.625)
    - sequence of points inserted: 
      A  0.0 0.75
      B  0.125 0.125
      C  0.3125 0.25
      D  0.625 0.5625
      E  0.5 0.3125
      F  0.6875 0.5
      G  0.25 0.4375
      H  1.0 0.9375
      I  0.375 0.875
      J  0.1875 0.375
    - student sequence of k-d tree nodes involved in calls to Point2D methods:
      B A C D H I E F 
    - reference sequence of k-d tree nodes involved in calls to Point2D methods:
      A B C D H I E F 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.125, 0.71875)
    - reference nearest() = (0.125, 0.71875)
    - performs incorrect traversal of k-d tree during call to nearest()
    - query point = (0.28125, 0.8125)
    - sequence of points inserted: 
      A  0.53125 0.90625
      B  0.40625 0.5
      C  0.875 0.6875
      D  0.09375 0.875
      E  0.78125 0.21875
      F  0.6875 0.53125
      G  0.21875 0.0625
      H  0.03125 1.0
      I  0.75 0.40625
      J  0.84375 0.96875
      K  0.65625 0.65625
      L  0.25 0.09375
      M  0.96875 0.4375
      N  0.125 0.71875
      O  0.15625 0.1875
      P  0.71875 0.5625
      Q  0.375 0.625
      R  0.9375 0.9375
      S  0.625 0.03125
      T  0.5625 0.3125
    - student sequence of k-d tree nodes involved in calls to Point2D methods:
      B A D N Q 
    - reference sequence of k-d tree nodes involved in calls to Point2D methods:
      A B D N Q 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.171875, 0.859375)
    - reference nearest() = (0.171875, 0.859375)
    - performs incorrect traversal of k-d tree during call to nearest()
    - entry 0 of the two sequences are not equal
    - student   entry 0 = (0.375, 0.40625)
    - reference entry 0 = (0.984375, 0.140625)

    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.6171875, 0.1171875)
    - reference nearest() = (0.6171875, 0.1171875)
    - performs incorrect traversal of k-d tree during call to nearest()
    - entry 0 of the two sequences are not equal
    - student   entry 0 = (0.1953125, 0.640625)
    - reference entry 0 = (0.1796875, 0.875)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.345703125, 0.02734375)
    - reference nearest() = (0.345703125, 0.02734375)
    - performs incorrect traversal of k-d tree during call to nearest()
    - entry 0 of the two sequences are not equal
    - student   entry 0 = (0.3798828125, 0.87060546875)
    - reference entry 0 = (0.966796875, 0.01611328125)

    - failed on trial 1 of 1000

==> FAILED

Test 9: check with no points
  * size() and isEmpty()
  * points()
  * contains()
  * get()
  * nearest()
  * range()
==> passed

Test 10: check that the specified exception is thrown with null arguments
  * either argument to put() is null
  * argument to get() is null
    - throws wrong exception when calling get() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

  * argument to contains() is null
    - throws wrong exception when calling contains() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

  * argument to range() is null
  * argument to nearest() is null
==> FAILED

Test 11: check with points and rectangles whose x- and y-coordinates
         are outside unit square
  * size() and isEmpty()
  * points()
  * contains()
  * get()
  * nearest()
  * range()
    - failed on trial 1 of 10000
    - query rectangle = [-512.0, -128.0] x [-1024.0, 896.0]
    - student   range():  D C 
    - reference range():  D R S H L R X X O Z P Z K Y M O L L Q M C 

==> FAILED

Test 12a: check intermixed sequence of calls to put(), isEmpty(), size(),
          get(), contains(), range(), nearest(), and points() with
          probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 18 of 20000
    - rectangle = [0.140625, 0.9296875] x [0.015625, 0.734375]
    - student   range():  A 
    - reference range():  A B D 
    - sequence of operations was:
           st.put((0.828125, 0.4921875), "A")
           st.put((0.28125, 0.5625), "B")
           st.points()   ==>  A B 
           st.put((0.53125, 0.265625), "D")
           st.size()     ==>  3
           st.nearest((0.8125, 0.3828125))   ==>  (0.828125, 0.4921875)
           st.isEmpty()  ==>  false
           st.range([0.109375, 0.1171875] x [0.078125, 0.28125])  ==>  empty
           st.nearest((0.96875, 0.9765625))   ==>  (0.828125, 0.4921875)
           st.get((0.265625, 0.7578125))     ==>  null
           st.range([0.1640625, 0.515625] x [0.609375, 0.7890625])  ==>  empty
           st.get((0.8828125, 0.1171875))     ==>  null
           st.put((0.265625, 0.9375), "M")
           st.points()   ==>  A B D M 
           st.put((1.0, 0.921875), "O")
           st.nearest((0.625, 0.171875))   ==>  (0.53125, 0.265625)
           st.range([0.2578125, 0.2734375] x [0.6875, 0.8984375])  ==>  empty
           st.range([0.140625, 0.9296875] x [0.015625, 0.734375])  ==>  A 

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 26 of 20000
    - rectangle = [0.3759765625, 0.9091796875] x [0.2060546875, 0.603515625]
    - student   range():  J 
    - reference range():  J O 
    - sequence of operations was:
           st.put((0.1669921875, 0.4033203125), "A")
           st.range([0.4267578125, 0.7783203125] x [0.21484375, 0.833984375])  ==>  empty
           st.put((0.8115234375, 0.828125), "C")
           st.nearest((0.02734375, 0.2900390625))   ==>  (0.1669921875, 0.4033203125)
           st.range([0.6328125, 0.923828125] x [0.86328125, 0.87109375])  ==>  empty
           st.nearest((0.6591796875, 0.02734375))   ==>  (0.1669921875, 0.4033203125)
           st.get((0.4970703125, 0.7578125))     ==>  null
           st.nearest((0.9775390625, 0.8193359375))   ==>  (0.8115234375, 0.828125)
           st.nearest((0.4052734375, 0.689453125))   ==>  (0.1669921875, 0.4033203125)
           st.put((0.7255859375, 0.5146484375), "J")
           st.nearest((0.2978515625, 0.7001953125))   ==>  (0.1669921875, 0.4033203125)
           st.nearest((0.1005859375, 0.7783203125))   ==>  (0.1669921875, 0.4033203125)
           st.put((0.365234375, 0.095703125), "M")
           st.contains((0.474609375, 0.3291015625))  ==>  false
           st.put((0.908203125, 0.390625), "O")
           st.points()   ==>  A C J M O 
           st.nearest((0.791015625, 0.685546875))   ==>  (0.8115234375, 0.828125)
           st.put((0.9013671875, 0.0478515625), "R")
           st.range([0.37109375, 0.7724609375] x [0.6953125, 0.9287109375])  ==>  empty
           st.get((0.3076171875, 0.765625))     ==>  null
           st.range([0.283203125, 0.8994140625] x [0.625, 0.8427734375])  ==>  C 
           st.nearest((0.1357421875, 0.42578125))   ==>  (0.1669921875, 0.4033203125)
           st.range([0.552734375, 0.646484375] x [0.666015625, 0.7470703125])  ==>  empty
           st.put((0.40625, 0.0068359375), "X")
           st.contains((0.884765625, 0.0146484375))  ==>  false
           st.range([0.3759765625, 0.9091796875] x [0.2060546875, 0.603515625])  ==>  J 

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 42 of 20000
    - rectangle = [0.163330078125, 0.577392578125] x [0.0262451171875, 0.308349609375]
    - student   range():  G 
    - reference range():  G I 

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 34 of 20000
    - rectangle = [0.2957916259765625, 0.478057861328125] x [0.4218597412109375, 0.98992919921875]
    - student   range():  J 
    - reference range():  J P G 

==> FAILED

Test 12b: check intermixed sequence of calls to put(), isEmpty(), size(),
          get(), contains(), range(), nearest(), and points() with
          probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 32 of 20000
    - rectangle = [0.125, 0.75] x [0.125, 0.4375]
    - student   range():  A 
    - reference range():  A L Q A 

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 29 of 20000
    - rectangle = [0.2578125, 0.703125] x [0.0703125, 0.9921875]
    - student   range():  A 
    - reference range():  A U 

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 18 of 20000
    - rectangle = [0.15234375, 0.67578125] x [0.4365234375, 0.8564453125]
    - student   range():  A 
    - reference range():  A N 
    - sequence of operations was:
           st.put((0.662109375, 0.560546875), "A")
           st.nearest((0.875, 0.2802734375))   ==>  (0.662109375, 0.560546875)
           st.put((0.1572265625, 0.2421875), "C")
           st.contains((0.34765625, 0.0322265625))  ==>  false
           st.put((0.8056640625, 0.6396484375), "E")
           st.range([0.1767578125, 0.4990234375] x [0.744140625, 0.8193359375])  ==>  empty
           st.put((1.0, 0.0810546875), "G")
           st.put((0.466796875, 0.0576171875), "H")
           st.range([0.072265625, 0.08984375] x [0.4970703125, 0.97265625])  ==>  empty
           st.range([0.359375, 0.5693359375] x [0.6201171875, 0.6376953125])  ==>  empty
           st.contains((0.85546875, 0.0830078125))  ==>  false
           st.nearest((0.8408203125, 0.2705078125))   ==>  (1.0, 0.0810546875)
           st.nearest((0.646484375, 0.3251953125))   ==>  (0.662109375, 0.560546875)
           st.put((0.28515625, 0.7392578125), "N")
           st.size()     ==>  6
           st.nearest((0.5546875, 0.2490234375))   ==>  (0.466796875, 0.0576171875)
           st.range([0.0068359375, 0.6591796875] x [0.2470703125, 0.3037109375])  ==>  empty
           st.range([0.15234375, 0.67578125] x [0.4365234375, 0.8564453125])  ==>  A 

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 20 of 20000
    - rectangle = [0.11376953125, 0.7979736328125] x [0.19775390625, 0.884521484375]
    - student   range():  C 
    - reference range():  C F I N O E R S 
    - sequence of operations was:
           st.size()     ==>  0
           st.put((0.1241455078125, 0.926513671875), "B")
           st.put((0.203857421875, 0.52001953125), "C")
           st.nearest((0.451416015625, 0.3797607421875))   ==>  (0.203857421875, 0.52001953125)
           st.put((0.4315185546875, 0.8321533203125), "E")
           st.put((0.3302001953125, 0.4520263671875), "F")
           st.nearest((0.4593505859375, 0.044921875))   ==>  (0.3302001953125, 0.4520263671875)
           st.nearest((0.52490234375, 0.837158203125))   ==>  (0.4315185546875, 0.8321533203125)
           st.put((0.521484375, 0.211181640625), "I")
           st.contains((0.17822265625, 0.07666015625))  ==>  false
           st.range([0.2161865234375, 0.6502685546875] x [0.316162109375, 0.920166015625])  ==>  F E 
           st.contains((0.2913818359375, 0.681884765625))  ==>  false
           st.nearest((0.63623046875, 0.0889892578125))   ==>  (0.521484375, 0.211181640625)
           st.put((0.64794921875, 0.2239990234375), "N")
           st.put((0.4892578125, 0.51513671875), "O")
           st.nearest((0.03173828125, 0.675537109375))   ==>  (0.203857421875, 0.52001953125)
           st.size()     ==>  7
           st.put((0.4178466796875, 0.762939453125), "R")
           st.put((0.5439453125, 0.80126953125), "S")
           st.range([0.11376953125, 0.7979736328125] x [0.19775390625, 0.884521484375])  ==>  C 

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 47 of 20000
    - rectangle = [0.35162353515625, 0.704315185546875] x [0.1981658935546875, 0.81109619140625]
    - student   range():  I 
    - reference range():  I F K 

==> FAILED

Test 12c: check intermixed sequence of calls to put(), isEmpty(), size(),
          get(), contains(), range(), nearest(), and points() with
          probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 10 of 20000
    - rectangle = [0.0, 0.0] x [0.0, 1.0]
    - student   range():  C 
    - reference range():  C I 
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.size()     ==>  0
           st.put((0.0, 0.0), "C")
           st.range([0.0, 1.0] x [0.0, 1.0])  ==>  C 
           st.contains((0.0, 1.0))  ==>  false
           st.size()     ==>  1
           st.isEmpty()  ==>  false
           st.nearest((0.0, 0.0))   ==>  (0.0, 0.0)
           st.put((0.0, 1.0), "I")
           st.range([0.0, 0.0] x [0.0, 1.0])  ==>  C 

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 19 of 20000
    - rectangle = [0.25, 0.8125] x [0.125, 0.5625]
    - student   range():  A 
    - reference range():  A H K I L 
    - sequence of operations was:
           st.put((0.6875, 0.5625), "A")
           st.put((0.1875, 0.6875), "B")
           st.nearest((0.25, 0.875))   ==>  (0.1875, 0.6875)
           st.put((0.9375, 0.75), "D")
           st.range([0.25, 0.5625] x [0.0625, 0.5625])  ==>  empty
           st.nearest((0.875, 0.5625))   ==>  (0.6875, 0.5625)
           st.isEmpty()  ==>  false
           st.put((0.625, 0.1875), "H")
           st.put((0.625, 0.125), "I")
           st.size()     ==>  5
           st.put((0.375, 0.3125), "K")
           st.put((0.8125, 0.25), "L")
           st.contains((0.125, 0.125))  ==>  false
           st.put((0.1875, 0.0), "N")
           st.range([0.3125, 0.5] x [0.6875, 1.0])  ==>  empty
           st.put((0.375, 0.8125), "P")
           st.put((0.875, 0.75), "Q")
           st.points()   ==>  A B D H P L Q K I N 
           st.range([0.25, 0.8125] x [0.125, 0.5625])  ==>  A 

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 35 of 20000
    - rectangle = [0.1484375, 0.3828125] x [0.09375, 0.59375]
    - student   range():  D 
    - reference range():  D H 

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 26 of 20000
    - rectangle = [0.0830078125, 0.8583984375] x [0.119140625, 0.861328125]
    - student   range():  P H 
    - reference range():  P Q H 
    - sequence of operations was:
           st.put((0.4306640625, 0.0224609375), "A")
           st.contains((0.96875, 0.609375))  ==>  false
           st.range([0.388671875, 0.8779296875] x [0.6279296875, 0.9169921875])  ==>  empty
           st.put((0.9443359375, 0.92578125), "D")
           st.points()   ==>  A D 
           st.put((0.0537109375, 0.9990234375), "F")
           st.points()   ==>  A F D 
           st.put((0.5537109375, 0.6162109375), "H")
           st.put((0.6708984375, 0.025390625), "I")
           st.nearest((0.2861328125, 0.0478515625))   ==>  (0.4306640625, 0.0224609375)
           st.nearest((0.9619140625, 0.0810546875))   ==>  (0.6708984375, 0.025390625)
           st.contains((0.560546875, 0.58984375))  ==>  false
           st.range([0.07421875, 0.9365234375] x [0.1630859375, 0.7978515625])  ==>  H 
           st.nearest((0.71484375, 0.5595703125))   ==>  (0.5537109375, 0.6162109375)
           st.nearest((0.48828125, 0.400390625))   ==>  (0.5537109375, 0.6162109375)
           st.put((0.2509765625, 0.2626953125), "P")
           st.put((0.20703125, 0.8115234375), "Q")
           st.isEmpty()  ==>  false
           st.isEmpty()  ==>  false
           st.contains((0.7177734375, 0.96484375))  ==>  false
           st.size()     ==>  7
           st.isEmpty()  ==>  false
           st.get((0.283203125, 0.0107421875))     ==>  null
           st.put((0.6484375, 0.8994140625), "X")
           st.put((0.025390625, 0.4931640625), "Y")
           st.range([0.0830078125, 0.8583984375] x [0.119140625, 0.861328125])  ==>  P H 

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 13 of 20000
    - rectangle = [0.0758056640625, 0.6573486328125] x [0.28515625, 0.943115234375]
    - student   range():  E 
    - reference range():  E L 
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.put((0.05517578125, 0.0504150390625), "B")
           st.range([0.6475830078125, 0.76953125] x [0.17138671875, 0.3092041015625])  ==>  empty
           st.range([0.177978515625, 0.4727783203125] x [0.0111083984375, 0.35693359375])  ==>  empty
           st.put((0.0758056640625, 0.89794921875), "E")
           st.put((0.39892578125, 0.9852294921875), "F")
           st.points()   ==>  B E F 
           st.size()     ==>  3
           st.nearest((0.3829345703125, 0.0303955078125))   ==>  (0.05517578125, 0.0504150390625)
           st.get((0.04736328125, 0.459228515625))     ==>  null
           st.isEmpty()  ==>  false
           st.put((0.3466796875, 0.8626708984375), "L")
           st.range([0.0758056640625, 0.6573486328125] x [0.28515625, 0.943115234375])  ==>  E 

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 41 of 20000
    - rectangle = [0.494781494140625, 0.7176971435546875] x [0.1332855224609375, 0.7366485595703125]
    - student   range():  N M P 
    - reference range():  N B M P 

==> FAILED

Test 13: insert n random points into two different KdTreeST objects;
        check that repeated calls to size(), get(), range(), nearest(),
        and points() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 24/36 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of PointST
*-----------------------------------------------------------
Running 8 total tests.

Memory of Point2D object = 32 bytes

Memory usage of a PointST with n points (including Point2D objects).
Maximum allowed memory is 96n + 232 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          208                288
=> passed        2          304                384
=> passed        5          592                672
=> passed       10         1072               1152
=> passed       25         2512               2592
=> passed      100         9712               9792
=> passed      400        38512              38592
=> passed      800        76912              76992
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 112.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 192.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTreeST
*-----------------------------------------------------------
Running 8 total tests.

Memory of Point2D object = 32 bytes
Memory of RectHV object = 48 bytes

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          240                240
=> passed        2          384                384
=> passed        5          816                816
=> passed       10         1536               1536
=> passed       25         3696               3696
=> passed      100        14496              14496
=> passed      400        57696              57696
=> passed      800       115296             115296
==> 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 144.00 n + 96.00  (R^2 = 1.000)
Reference memory (bytes) = 144.00 n + 96.00  (R^2 = 1.000)

================================================================




