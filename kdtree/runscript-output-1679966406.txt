

netid => ed8205
assignment => Kd_Tree
file01 => @/n/fs/tigerfile/Files/COS226_S2023/Kd_Tree/submissions/cd1c0c5d92190236d3f1a7710e4221ef/readme.txt;filename=20230327103436/readme.txt
file02 => @/n/fs/tigerfile/Files/COS226_S2023/Kd_Tree/submissions/cd1c0c5d92190236d3f1a7710e4221ef/PointST.java;filename=20230327191401/PointST.java
file03 => @/n/fs/tigerfile/Files/COS226_S2023/Kd_Tree/submissions/cd1c0c5d92190236d3f1a7710e4221ef/KdTreeST.java;filename=20230327211948/KdTreeST.java
The following files were submitted:
----------------------------------
  11K Mar 27 21:19 KdTreeST.java
 4.5K Mar 27 19:14 PointST.java
 3.7K Mar 27 10:34 readme.txt


*** The acknowledgments.txt file has NOT been submitted.***
*** This assessment will NOT be graded until the acknowledgments.txt file is submitted.***


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointST.java
*-----------------------------------------------------------

% javac KdTreeST.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointST:

KdTreeST:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M C NP_NULL_ON_SOME_PATH NP: Dereferences the variable 'current', but its value might be null on some execution branch.  Dereferenced at KdTreeST.java:[line 92]
M C RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE RCN: Checks whether the variable 'left' is null [line 225], even though it can't be null because it was previously dereferenced.  At KdTreeST.java:[line 222]
M D RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT RV: Calls the method 'distanceSquaredTo()' but ignores its return value. The method, however, does not produce any effect other than returning a value.  At KdTreeST.java:[line 218]
SpotBugs ends with 3 warnings.


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for PointST.java
*-----------------------------------------------------------
Checkstyle ends with 1 errors.
[ERROR] PointST.java:70: Do not create more than one redâ€“black BST in this program. [Performance]
[WARN] PointST.java:70:54: Do not call 'RedBlackBST()' in 'range()'. Inserting n keys into an initially empty red-black BST takes n log n time. [Performance]
Checkstyle ends with 1 error and 1 warning.

% custom checkstyle checks for KdTreeST.java
*-----------------------------------------------------------

% custom checkstyle checks for readme.txt
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointST
*-----------------------------------------------------------
Running 16 total tests.

In the tests below, we consider two classes of points.
  * Distinct points: no two points have same x- and y-coordinates
  * General points:  no restrictions on the x- or y-coordinates of the points

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert n random distinct points; check size() and isEmpty() after each insertion
  * 2 random distinct points in a 1-by-1 grid
  * 64 random distinct points in a 8-by-8 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 128-by-128 grid
  * 5000 random distinct points in a 1024-by-1024 grid
  * 50000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1b: insert n random points; check size() and isEmpty() after each insertion
         (size may be less than n because of duplicates)
  * 5 random general points in a 1-by-1 grid
  * 50 random general points in a 8-by-8 grid
  * 100 random general points in a 16-by-16 grid
  * 1000 random general points in a 128-by-128 grid
  * 5000 random general points in a 1024-by-1024 grid
  * 50000 random general points in a 65536-by-65536 grid
==> passed

Test 2a: insert n random distinct points; check contains() with random query points
  * 2 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2b: insert n random points; check contains() with random query points
  * 1 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 10000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
  * 100000 random general points in a 65536-by-65536 grid
==> passed

Test 3a: insert random distinct points; check get() with random query points
  * 2 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 64-by-64 grid
  * 10000 random distinct points in a 128-by-128 grid
==> passed

Test 3b: insert random points; check get() with random query points
  * 2 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 16-by-16 grid
  * 1000 random general points in a 64-by-64 grid
  * 10000 random general points in a 128-by-128 grid
==> passed

Test 4a: insert random distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==> passed

Test 4b: insert random points; check nearest() with random query points
  * 10 random general points in a 4-by-4 grid
  * 15 random general points in a 8-by-8 grid
  * 20 random general points in a 16-by-16 grid
  * 100 random general points in a 32-by-32 grid
  * 10000 random general points in a 65536-by-65536 grid
==> passed

Test 5a: insert n random distinct points and call points()
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 128-by-128 grid
  * 1000 random distinct points in a 1024-by-1024 grid
==> passed

Test 5b: insert n random points and call points()
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 1000 random general points in a 16-by-16 grid
  * 1000 random general points in a 128-by-128 grid
  * 1000 random general points in a 1024-by-1024 grid
==> passed

Test 6a: insert random distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 6b: insert random points; check range() with random query rectangles
  * 2 random general points and random rectangles in a 2-by-2 grid
  * 10 random general points and random rectangles in a 4-by-4 grid
  * 20 random general points and random rectangles in a 8-by-8 grid
  * 100 random general points and random rectangles in a 16-by-16 grid
  * 1000 random general points and random rectangles in a 64-by-64 grid
  * 10000 random general points and random rectangles in a 128-by-128 grid
==> passed

Test 7: check with no points
 * size() and isEmpty()
 * points()
 * contains()
 * get()
 * nearest()
 * range()
==> passed

Test 8: call methods with null arguments
  * either argument to put() is null
  * argument to get() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9: check intermixed sequence of calls to put(), isEmpty(), size(),
        get(), contains(), range(), nearest(), and points() with
        probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
==> passed

Test 10: check that two PointST objects can be created at the same time
==> passed


Total: 16/16 tests passed!


================================================================
Testing correctness of KdTreeST
*-----------------------------------------------------------
Running 36 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
  * input25.txt
  * input50.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check points()
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check points()
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 1000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check points()
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 128-by-128 grid
  * 1000 random distinct points in a 1024-by-1024 grid
  * 1000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check points()
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 1000 random general points in a 16-by-16 grid
  * 1000 random general points in a 128-by-128 grid
  * 1000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check contains() with random query points
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 3d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 4a: insert points from file; check get() with random query points
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check get() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 4c: insert distinct points; check get() with random query points
  * 2 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 64-by-64 grid
  * 10000 random distinct points in a 128-by-128 grid
==> passed

Test 4d: insert general points; check get() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 5a: insert points from file; check range() with random query rectangles
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 5b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 5c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 5d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 5e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 6a: insert points from file; check range() with random query rectangles
         and check traversal of k-d tree
  * input5.txt
  * input10.txt
==> passed

Test 6b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of k-d tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 7a: insert points from file; check nearest() with random query points
  * input1.txt
  * input5.txt
  * input10.txt

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:235)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkNearest(TestKdTreeST.java:463)
    TestKdTreeST.checkNearest(TestKdTreeST.java:426)
    TestKdTreeST.test7a(TestKdTreeST.java:2188)
    TestKdTreeST.main(TestKdTreeST.java:2463)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

==> FAILED

Test 7b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkNearest(TestKdTreeST.java:463)
    TestKdTreeST.checkNearest(TestKdTreeST.java:420)
    TestKdTreeST.test7b(TestKdTreeST.java:2197)
    TestKdTreeST.main(TestKdTreeST.java:2466)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 10 random non-degenerate points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkNearest(TestKdTreeST.java:463)
    TestKdTreeST.checkNearest(TestKdTreeST.java:420)
    TestKdTreeST.test7b(TestKdTreeST.java:2198)
    TestKdTreeST.main(TestKdTreeST.java:2466)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 20 random non-degenerate points in a 32-by-32 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkNearest(TestKdTreeST.java:463)
    TestKdTreeST.checkNearest(TestKdTreeST.java:420)
    TestKdTreeST.test7b(TestKdTreeST.java:2199)
    TestKdTreeST.main(TestKdTreeST.java:2466)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 30 random non-degenerate points in a 64-by-64 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    ...
    TestKdTreeST.checkNearest(TestKdTreeST.java:463)
    TestKdTreeST.checkNearest(TestKdTreeST.java:420)
    TestKdTreeST.test7b(TestKdTreeST.java:2200)
    TestKdTreeST.main(TestKdTreeST.java:2466)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 10000 random non-degenerate points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:228)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    ...
    TestKdTreeST.checkNearest(TestKdTreeST.java:463)
    TestKdTreeST.checkNearest(TestKdTreeST.java:420)
    TestKdTreeST.test7b(TestKdTreeST.java:2201)
    TestKdTreeST.main(TestKdTreeST.java:2466)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

==> FAILED

Test 7c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearest(KdTreeST.java:209)
    ...
    TestKdTreeST.checkNearest(TestKdTreeST.java:463)
    TestKdTreeST.checkNearest(TestKdTreeST.java:420)
    TestKdTreeST.test7c(TestKdTreeST.java:2209)
    TestKdTreeST.main(TestKdTreeST.java:2469)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 15 random distinct points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkNearest(TestKdTreeST.java:463)
    TestKdTreeST.checkNearest(TestKdTreeST.java:420)
    TestKdTreeST.test7c(TestKdTreeST.java:2210)
    TestKdTreeST.main(TestKdTreeST.java:2469)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 20 random distinct points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkNearest(TestKdTreeST.java:463)
    TestKdTreeST.checkNearest(TestKdTreeST.java:420)
    TestKdTreeST.test7c(TestKdTreeST.java:2211)
    TestKdTreeST.main(TestKdTreeST.java:2469)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 100 random distinct points in a 32-by-32 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    ...
    TestKdTreeST.checkNearest(TestKdTreeST.java:463)
    TestKdTreeST.checkNearest(TestKdTreeST.java:420)
    TestKdTreeST.test7c(TestKdTreeST.java:2212)
    TestKdTreeST.main(TestKdTreeST.java:2469)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 10000 random distinct points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:235)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    ...
    TestKdTreeST.checkNearest(TestKdTreeST.java:463)
    TestKdTreeST.checkNearest(TestKdTreeST.java:420)
    TestKdTreeST.test7c(TestKdTreeST.java:2213)
    TestKdTreeST.main(TestKdTreeST.java:2469)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

==> FAILED

Test 7d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkNearest(TestKdTreeST.java:463)
    TestKdTreeST.checkNearest(TestKdTreeST.java:420)
    TestKdTreeST.test7d(TestKdTreeST.java:2221)
    TestKdTreeST.main(TestKdTreeST.java:2472)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 10000 random general points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    ...
    TestKdTreeST.checkNearest(TestKdTreeST.java:463)
    TestKdTreeST.checkNearest(TestKdTreeST.java:420)
    TestKdTreeST.test7d(TestKdTreeST.java:2222)
    TestKdTreeST.main(TestKdTreeST.java:2472)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 10000 random general points in a 1024-by-1024 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    ...
    TestKdTreeST.checkNearest(TestKdTreeST.java:463)
    TestKdTreeST.checkNearest(TestKdTreeST.java:420)
    TestKdTreeST.test7d(TestKdTreeST.java:2223)
    TestKdTreeST.main(TestKdTreeST.java:2472)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

==> FAILED

Test 8a: insert points from file; check nearest() with random query points
         and check traversal of k-d tree
  * input5.txt
  * input10.txt

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:228)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkNearestTraversal(TestKdTreeST.java:549)
    TestKdTreeST.checkNearestTraversal(TestKdTreeST.java:508)
    TestKdTreeST.test8a(TestKdTreeST.java:2233)
    TestKdTreeST.main(TestKdTreeST.java:2475)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

==> FAILED

Test 8b: insert non-degenerate points; check nearest() with random query points
         and check traversal of k-d tree
  * 5 random non-degenerate points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:228)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkNearestTraversal(TestKdTreeST.java:549)
    TestKdTreeST.checkNearestTraversal(TestKdTreeST.java:513)
    TestKdTreeST.test8b(TestKdTreeST.java:2243)
    TestKdTreeST.main(TestKdTreeST.java:2478)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 10 random non-degenerate points in a 16-by-16 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:235)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearest(KdTreeST.java:209)
    ...
    TestKdTreeST.checkNearestTraversal(TestKdTreeST.java:549)
    TestKdTreeST.checkNearestTraversal(TestKdTreeST.java:513)
    TestKdTreeST.test8b(TestKdTreeST.java:2244)
    TestKdTreeST.main(TestKdTreeST.java:2478)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 20 random non-degenerate points in a 32-by-32 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    ...
    TestKdTreeST.checkNearestTraversal(TestKdTreeST.java:549)
    TestKdTreeST.checkNearestTraversal(TestKdTreeST.java:513)
    TestKdTreeST.test8b(TestKdTreeST.java:2245)
    TestKdTreeST.main(TestKdTreeST.java:2478)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 30 random non-degenerate points in a 64-by-64 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkNearestTraversal(TestKdTreeST.java:549)
    TestKdTreeST.checkNearestTraversal(TestKdTreeST.java:513)
    TestKdTreeST.test8b(TestKdTreeST.java:2246)
    TestKdTreeST.main(TestKdTreeST.java:2478)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 50 random non-degenerate points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    ...
    TestKdTreeST.checkNearestTraversal(TestKdTreeST.java:549)
    TestKdTreeST.checkNearestTraversal(TestKdTreeST.java:513)
    TestKdTreeST.test8b(TestKdTreeST.java:2247)
    TestKdTreeST.main(TestKdTreeST.java:2478)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 1000 random non-degenerate points in a 2048-by-2048 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    ...
    TestKdTreeST.checkNearestTraversal(TestKdTreeST.java:549)
    TestKdTreeST.checkNearestTraversal(TestKdTreeST.java:513)
    TestKdTreeST.test8b(TestKdTreeST.java:2248)
    TestKdTreeST.main(TestKdTreeST.java:2478)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

==> FAILED

Test 9: check with no points
  * size() and isEmpty()
  * points()
  * contains()
  * get()
  * nearest()
  * range()
==> passed

Test 10: check that the specified exception is thrown with null arguments
  * either argument to put() is null
  * argument to get() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 11: check with points and rectangles whose x- and y-coordinates
         are outside unit square
  * size() and isEmpty()
  * points()
  * contains()
  * get()
  * nearest()

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:235)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    ...
    TestKdTreeST.checkNearest(TestKdTreeST.java:463)
    TestKdTreeST.checkNearest(TestKdTreeST.java:415)
    TestKdTreeST.test11(TestKdTreeST.java:2285)
    TestKdTreeST.main(TestKdTreeST.java:2487)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * range()
==> FAILED

Test 12a: check intermixed sequence of calls to put(), isEmpty(), size(),
          get(), contains(), range(), nearest(), and points() with
          probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:228)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    ...
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12a(TestKdTreeST.java:2296)
    TestKdTreeST.main(TestKdTreeST.java:2490)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)


  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12a(TestKdTreeST.java:2297)
    TestKdTreeST.main(TestKdTreeST.java:2490)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

    - sequence of operations was:
           st.put((0.828125, 0.6953125), "A")
           st.contains((0.7734375, 0.75))  ==>  false
           st.contains((0.21875, 0.734375))  ==>  false
           st.range([0.453125, 0.8515625] x [0.1015625, 0.28125])  ==>  empty
           st.range([0.4296875, 0.6171875] x [0.3203125, 0.6171875])  ==>  empty
           st.put((0.1875, 0.5234375), "F")
           st.range([0.0, 0.515625] x [0.6875, 0.9140625])  ==>  empty
           st.contains((0.734375, 0.90625))  ==>  false
           st.range([0.109375, 0.1796875] x [0.2109375, 0.3515625])  ==>  empty
           st.put((0.7734375, 0.6796875), "J")
           st.put((0.53125, 0.4140625), "K")
           st.get((0.75, 0.1875))     ==>  null
           st.nearest((0.4921875, 0.15625))   ==>  (0.53125, 0.4140625)
           st.put((0.03125, 0.609375), "N")
           st.nearest((0.359375, 0.0703125))   ==>  (0.53125, 0.4140625)
           st.put((0.6796875, 0.3984375), "P")
           st.range([0.0625, 0.859375] x [0.09375, 0.3515625])  ==>  empty
           st.put((0.859375, 0.1171875), "R")
           st.nearest((0.3984375, 0.4375))

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12a(TestKdTreeST.java:2298)
    TestKdTreeST.main(TestKdTreeST.java:2490)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

    - sequence of operations was:
           st.put((0.3427734375, 0.322265625), "A")
           st.range([0.244140625, 0.6328125] x [0.078125, 0.9638671875])  ==>  A 
           st.nearest((0.2685546875, 0.0185546875))   ==>  (0.3427734375, 0.322265625)
           st.contains((0.765625, 0.5341796875))  ==>  false
           st.put((0.859375, 0.4970703125), "E")
           st.nearest((0.0712890625, 0.5908203125))

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12a(TestKdTreeST.java:2299)
    TestKdTreeST.main(TestKdTreeST.java:2490)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)


  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12a(TestKdTreeST.java:2300)
    TestKdTreeST.main(TestKdTreeST.java:2490)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

    - sequence of operations was:
           st.put((0.0369720458984375, 0.1297760009765625), "A")
           st.get((0.0080413818359375, 0.800994873046875))     ==>  null
           st.put((0.8205718994140625, 0.7822723388671875), "C")
           st.range([0.5709075927734375, 0.861602783203125] x [0.655487060546875, 0.9157562255859375])  ==>  C 
           st.contains((0.524688720703125, 0.3550567626953125))  ==>  false
           st.put((0.6909637451171875, 0.872467041015625), "F")
           st.put((0.0478973388671875, 0.9490509033203125), "G")
           st.nearest((0.3820037841796875, 0.2188873291015625))

==> FAILED

Test 12b: check intermixed sequence of calls to put(), isEmpty(), size(),
          get(), contains(), range(), nearest(), and points() with
          probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12b(TestKdTreeST.java:2310)
    TestKdTreeST.main(TestKdTreeST.java:2493)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

    - sequence of operations was:
           st.put((0.375, 0.375), "A")
           st.contains((0.75, 0.375))  ==>  false
           st.put((0.3125, 0.375), "C")
           st.put((0.0, 0.75), "D")
           st.put((0.4375, 0.9375), "E")
           st.put((0.1875, 0.875), "F")
           st.nearest((0.0, 0.25))

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12b(TestKdTreeST.java:2311)
    TestKdTreeST.main(TestKdTreeST.java:2493)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

    - sequence of operations was:
           st.size()     ==>  0
           st.size()     ==>  0
           st.size()     ==>  0
           st.put((0.34375, 0.6875), "D")
           st.isEmpty()  ==>  false
           st.range([0.2890625, 0.90625] x [0.4765625, 0.59375])  ==>  empty
           st.points()   ==>  D 
           st.put((0.2578125, 0.6796875), "H")
           st.range([0.125, 0.7890625] x [0.609375, 0.765625])  ==>  D H 
           st.nearest((0.484375, 0.5625))   ==>  (0.34375, 0.6875)
           st.contains((0.90625, 0.390625))  ==>  false
           st.put((0.6796875, 0.8828125), "L")
           st.put((0.8984375, 0.3828125), "M")
           st.put((0.34375, 0.6484375), "N")
           st.range([0.40625, 0.5625] x [0.1015625, 0.2734375])  ==>  empty
           st.put((0.3671875, 0.8125), "P")
           st.put((0.1015625, 0.390625), "Q")
           st.get((0.3671875, 0.0))     ==>  null
           st.points()   ==>  D H L Q M N P 
           st.range([0.4609375, 0.765625] x [0.0546875, 0.34375])  ==>  empty
           st.nearest((0.625, 0.1875))

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:235)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12b(TestKdTreeST.java:2312)
    TestKdTreeST.main(TestKdTreeST.java:2493)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)


  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12b(TestKdTreeST.java:2313)
    TestKdTreeST.main(TestKdTreeST.java:2493)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

    - sequence of operations was:
           st.put((0.22998046875, 0.551513671875), "A")
           st.put((0.1368408203125, 0.550048828125), "B")
           st.nearest((0.4871826171875, 0.083251953125))   ==>  (0.22998046875, 0.551513671875)
           st.put((0.88671875, 0.96630859375), "D")
           st.range([0.8184814453125, 0.8214111328125] x [0.4139404296875, 0.730712890625])  ==>  empty
           st.put((0.2642822265625, 0.3223876953125), "F")
           st.range([0.07470703125, 0.2022705078125] x [0.598876953125, 0.744384765625])  ==>  empty
           st.put((0.7825927734375, 0.0672607421875), "H")
           st.put((0.1719970703125, 0.2032470703125), "I")
           st.range([0.3704833984375, 0.760009765625] x [0.5614013671875, 0.6173095703125])  ==>  empty
           st.size()     ==>  6
           st.put((0.50830078125, 0.1883544921875), "L")
           st.points()   ==>  A B D I F H L 
           st.contains((0.2918701171875, 0.2587890625))  ==>  false
           st.nearest((0.5260009765625, 0.8992919921875))

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12b(TestKdTreeST.java:2314)
    TestKdTreeST.main(TestKdTreeST.java:2493)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

    - sequence of operations was:
           st.put((0.0511932373046875, 0.8402099609375), "A")
           st.nearest((0.8889312744140625, 0.6831512451171875))   ==>  (0.0511932373046875, 0.8402099609375)
           st.contains((0.734344482421875, 0.05181884765625))  ==>  false
           st.range([0.0827789306640625, 0.1709136962890625] x [0.506378173828125, 0.7860870361328125])  ==>  empty
           st.range([0.7427215576171875, 0.876678466796875] x [0.398529052734375, 0.5899200439453125])  ==>  empty
           st.range([0.5615234375, 0.91497802734375] x [0.480712890625, 0.846038818359375])  ==>  empty
           st.put((0.711669921875, 0.6976470947265625), "G")
           st.put((0.5419158935546875, 0.6899566650390625), "H")
           st.range([0.0162200927734375, 0.29376220703125] x [0.0189056396484375, 0.362457275390625])  ==>  empty
           st.range([0.1464996337890625, 0.391204833984375] x [0.0729827880859375, 0.283203125])  ==>  empty
           st.range([0.0577239990234375, 0.56317138671875] x [0.0711822509765625, 0.466461181640625])  ==>  empty
           st.range([0.109344482421875, 0.4527587890625] x [0.3678131103515625, 0.7256317138671875])  ==>  empty
           st.isEmpty()  ==>  false
           st.range([0.080535888671875, 0.5553131103515625] x [0.2288970947265625, 0.78192138671875])  ==>  H 
           st.nearest((0.992340087890625, 0.939605712890625))

==> FAILED

Test 12c: check intermixed sequence of calls to put(), isEmpty(), size(),
          get(), contains(), range(), nearest(), and points() with
          probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12c(TestKdTreeST.java:2323)
    TestKdTreeST.main(TestKdTreeST.java:2496)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

    - sequence of operations was:
           st.put((0.0, 1.0), "A")
           st.range([0.0, 1.0] x [0.0, 0.0])  ==>  empty
           st.put((1.0, 0.0), "C")
           st.get((0.0, 0.0))     ==>  null
           st.range([0.0, 1.0] x [1.0, 1.0])  ==>  A 
           st.nearest((0.0, 1.0))

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:228)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12c(TestKdTreeST.java:2324)
    TestKdTreeST.main(TestKdTreeST.java:2496)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.put((0.8125, 0.3125), "B")
           st.nearest((0.625, 0.8125))   ==>  (0.8125, 0.3125)
           st.range([0.0625, 0.4375] x [0.25, 0.375])  ==>  empty
           st.nearest((0.3125, 0.375))   ==>  (0.8125, 0.3125)
           st.nearest((0.5625, 0.1875))   ==>  (0.8125, 0.3125)
           st.get((0.6875, 0.5625))     ==>  null
           st.put((0.0, 0.8125), "H")
           st.size()     ==>  2
           st.get((0.875, 0.25))     ==>  null
           st.range([0.1875, 0.4375] x [0.5625, 0.75])  ==>  empty
           st.size()     ==>  2
           st.size()     ==>  2
           st.put((0.375, 0.8125), "N")
           st.points()   ==>  B H N 
           st.put((1.0, 0.6875), "P")
           st.isEmpty()  ==>  false
           st.put((1.0, 0.6875), "R")
           st.nearest((0.9375, 0.125))

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12c(TestKdTreeST.java:2325)
    TestKdTreeST.main(TestKdTreeST.java:2496)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

    - sequence of operations was:
           st.put((0.234375, 0.0078125), "A")
           st.range([0.578125, 0.7265625] x [0.0390625, 0.5234375])  ==>  empty
           st.range([0.6328125, 0.6484375] x [0.671875, 0.7578125])  ==>  empty
           st.nearest((0.421875, 0.8828125))   ==>  (0.234375, 0.0078125)
           st.get((0.203125, 0.828125))     ==>  null
           st.range([0.3046875, 0.5859375] x [0.1171875, 0.1640625])  ==>  empty
           st.put((0.734375, 0.1015625), "G")
           st.put((0.78125, 0.265625), "H")
           st.size()     ==>  3
           st.nearest((0.15625, 0.421875))

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12c(TestKdTreeST.java:2326)
    TestKdTreeST.main(TestKdTreeST.java:2496)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

    - sequence of operations was:
           st.size()     ==>  0
           st.size()     ==>  0
           st.put((0.0771484375, 0.697265625), "C")
           st.put((0.2724609375, 0.505859375), "D")
           st.isEmpty()  ==>  false
           st.nearest((0.888671875, 0.7861328125))

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12c(TestKdTreeST.java:2327)
    TestKdTreeST.main(TestKdTreeST.java:2496)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

    - sequence of operations was:
           st.put((0.3338623046875, 0.7142333984375), "A")
           st.nearest((0.50390625, 0.015625))   ==>  (0.3338623046875, 0.7142333984375)
           st.range([0.7998046875, 0.9124755859375] x [0.9375, 0.9952392578125])  ==>  empty
           st.get((0.9810791015625, 0.404541015625))     ==>  null
           st.put((0.4835205078125, 0.4998779296875), "E")
           st.put((0.8243408203125, 0.5540771484375), "F")
           st.range([0.7825927734375, 0.923095703125] x [0.6810302734375, 0.906982421875])  ==>  empty
           st.range([0.27099609375, 0.505615234375] x [0.4549560546875, 0.7640380859375])  ==>  A E 
           st.nearest((0.755859375, 0.2684326171875))

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:228)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkIntermixed(TestKdTreeST.java:1150)
    TestKdTreeST.test12c(TestKdTreeST.java:2328)
    TestKdTreeST.main(TestKdTreeST.java:2496)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

    - sequence of operations was:
           st.put((0.4586639404296875, 0.7705078125), "A")
           st.contains((0.397064208984375, 0.543243408203125))  ==>  false
           st.put((0.454498291015625, 0.536956787109375), "C")
           st.put((0.0829620361328125, 0.3585662841796875), "D")
           st.contains((0.7603302001953125, 0.345001220703125))  ==>  false
           st.put((0.1945343017578125, 0.542449951171875), "F")
           st.contains((0.1167755126953125, 0.1551513671875))  ==>  false
           st.nearest((0.20166015625, 0.3724822998046875))   ==>  (0.0829620361328125, 0.3585662841796875)
           st.put((0.251434326171875, 0.8214111328125), "I")
           st.size()     ==>  5
           st.points()   ==>  A C D F I 
           st.range([0.2657012939453125, 0.7761383056640625] x [0.0118560791015625, 0.5724029541015625])  ==>  C 
           st.contains((0.92523193359375, 0.0423583984375))  ==>  false
           st.size()     ==>  5
           st.put((0.495391845703125, 0.2264862060546875), "O")
           st.put((0.1977996826171875, 0.5436859130859375), "P")
           st.nearest((0.70220947265625, 0.952423095703125))

==> FAILED

Test 13: insert n random points into two different KdTreeST objects;
        check that repeated calls to size(), get(), range(), nearest(),
        and points() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkImmutabilityTwoKdTreeObjects(TestKdTreeST.java:1569)
    TestKdTreeST.test13(TestKdTreeST.java:2361)
    TestKdTreeST.main(TestKdTreeST.java:2499)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

    - sequence of operations was:
           KdTreeST<String> st1 = new KdTreeST<String>();
           st1.put((0.25, 0.0), "A")
           st1.put((0.25, 0.75), "B")
           st1.put((0.75, 1.0), "C")
           st2.put((0.5, 0.5), "D")
           st2.put((0.25, 0.0), "E")
           st2.put((0.5, 0.5), "F")
           st2.put((1.0, 1.0), "G")
           st2.put((0.75, 0.25), "H")
           st2.put((0.5, 0.0), "I")
           st2.put((1.0, 0.25), "J")
           st1.points()  ==>  A B C 
           st2.points()  ==>  F E G H I J 
           st1.range([0.25, 1.0] x [0.25, 0.75])  ==>  B 
           st2.nearest((0.5, 0.5))  ==>  (0.5, 0.5)
           st2.nearest((0.25, 0.0))  ==>  (0.25, 0.0)
           st1.range([0.0, 0.25] x [0.0, 0.75])  ==>  A B 
           st1.nearest((0.5, 0.5))
  * 20 random general points in a 8-by-8 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkImmutabilityTwoKdTreeObjects(TestKdTreeST.java:1589)
    TestKdTreeST.test13(TestKdTreeST.java:2362)
    TestKdTreeST.main(TestKdTreeST.java:2499)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

    - sequence of operations was:
           KdTreeST<String> st1 = new KdTreeST<String>();
           st1.put((0.25, 0.0), "A")
           st1.put((0.875, 1.0), "B")
           st2.put((0.25, 0.75), "C")
           st2.put((0.25, 0.0), "D")
           st2.put((0.25, 0.0), "E")
           st2.put((0.125, 1.0), "F")
           st2.put((0.125, 0.5), "G")
           st2.put((0.625, 0.625), "H")
           st2.put((0.5, 0.625), "I")
           st2.put((0.25, 0.5), "J")
           st2.put((0.625, 0.25), "K")
           st2.put((0.625, 0.0), "L")
           st2.put((0.875, 0.125), "M")
           st2.put((0.875, 0.625), "N")
           st2.put((0.5, 0.5), "O")
           st2.put((0.0, 1.0), "P")
           st2.put((0.5, 0.0), "Q")
           st2.put((0.375, 0.0), "R")
           st2.put((0.375, 0.25), "S")
           st2.put((0.625, 0.25), "T")
           st1.points()  ==>  A B 
           st2.nearest((0.875, 1.0))
  * 100 random general points in a 128-by-128 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    ...
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkImmutabilityTwoKdTreeObjects(TestKdTreeST.java:1569)
    TestKdTreeST.test13(TestKdTreeST.java:2363)
    TestKdTreeST.main(TestKdTreeST.java:2499)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

  * 1000 random general points in a 65536-by-65536 grid

    java.lang.NullPointerException

    KdTreeST.nearestHelper(KdTreeST.java:222)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:231)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    KdTreeST.nearestHelper(KdTreeST.java:224)
    ...
    KdTreeST.nearest(KdTreeST.java:209)
    TestKdTreeST.checkImmutabilityTwoKdTreeObjects(TestKdTreeST.java:1589)
    TestKdTreeST.test13(TestKdTreeST.java:2364)
    TestKdTreeST.main(TestKdTreeST.java:2499)
    TigerFileTestKdTreeST.main(TigerFileTestKdTreeST.java:3)

==> FAILED


Total: 25/36 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of PointST
*-----------------------------------------------------------
Running 8 total tests.

Memory of Point2D object = 32 bytes

Memory usage of a PointST with n points (including Point2D objects).
Maximum allowed memory is 96n + 232 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          208                288
=> passed        2          304                384
=> passed        5          592                672
=> passed       10         1072               1152
=> passed       25         2512               2592
=> passed      100         9712               9792
=> passed      400        38512              38592
=> passed      800        76912              76992
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 112.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 192.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTreeST
*-----------------------------------------------------------
Running 8 total tests.

Memory of Point2D object = 32 bytes
Memory of RectHV object = 48 bytes

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          240                240
=> passed        2          384                384
=> passed        5          816                816
=> passed       10         1536               1536
=> passed       25         3696               3696
=> passed      100        14496              14496
=> passed      400        57696              57696
=> passed      800       115296             115296
==> 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 144.00 n + 96.00  (R^2 = 1.000)
Reference memory (bytes) = 144.00 n + 96.00  (R^2 = 1.000)

================================================================




