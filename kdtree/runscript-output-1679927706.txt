

netid => ed8205
assignment => Kd_Tree
file01 => @/n/fs/tigerfile/Files/COS226_S2023/Kd_Tree/submissions/cd1c0c5d92190236d3f1a7710e4221ef/KdTreeST.java;filename=20230327103426/KdTreeST.java
file02 => @/n/fs/tigerfile/Files/COS226_S2023/Kd_Tree/submissions/cd1c0c5d92190236d3f1a7710e4221ef/PointST.java;filename=20230327103432/PointST.java
file03 => @/n/fs/tigerfile/Files/COS226_S2023/Kd_Tree/submissions/cd1c0c5d92190236d3f1a7710e4221ef/readme.txt;filename=20230327103436/readme.txt
The following files were submitted:
----------------------------------
 8.5K Mar 27 10:34 KdTreeST.java
 4.5K Mar 27 10:34 PointST.java
 3.7K Mar 27 10:34 readme.txt


*** The acknowledgments.txt file has NOT been submitted.***
*** This assessment will NOT be graded until the acknowledgments.txt file is submitted.***


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointST.java
*-----------------------------------------------------------

% javac KdTreeST.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointST:

KdTreeST:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------

% custom checkstyle checks for PointST.java
*-----------------------------------------------------------
Checkstyle ends with 3 errors.
[ERROR] PointST.java:1: The 'nearest()' method must call 'distanceSquaredTo()'. [MethodCallCount]
[ERROR] PointST.java:70: Do not create more than one redâ€“black BST in this program. [Performance]
[ERROR] PointST.java:90:27: Do not call 'distanceTo()' in this program; instead use 'distanceSquaredTo()'. [Performance]
[WARN] PointST.java:70:54: Do not call 'RedBlackBST()' in 'range()'. Inserting n keys into an initially empty red-black BST takes n log n time. [Performance]
Checkstyle ends with 3 errors and 1 warning.

% custom checkstyle checks for KdTreeST.java
*-----------------------------------------------------------

% custom checkstyle checks for readme.txt
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointST
*-----------------------------------------------------------
Running 16 total tests.

In the tests below, we consider two classes of points.
  * Distinct points: no two points have same x- and y-coordinates
  * General points:  no restrictions on the x- or y-coordinates of the points

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert n random distinct points; check size() and isEmpty() after each insertion
  * 2 random distinct points in a 1-by-1 grid
  * 64 random distinct points in a 8-by-8 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 128-by-128 grid
  * 5000 random distinct points in a 1024-by-1024 grid
  * 50000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1b: insert n random points; check size() and isEmpty() after each insertion
         (size may be less than n because of duplicates)
  * 5 random general points in a 1-by-1 grid
  * 50 random general points in a 8-by-8 grid
  * 100 random general points in a 16-by-16 grid
  * 1000 random general points in a 128-by-128 grid
  * 5000 random general points in a 1024-by-1024 grid
  * 50000 random general points in a 65536-by-65536 grid
==> passed

Test 2a: insert n random distinct points; check contains() with random query points
  * 2 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2b: insert n random points; check contains() with random query points
  * 1 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 10000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
  * 100000 random general points in a 65536-by-65536 grid
==> passed

Test 3a: insert random distinct points; check get() with random query points
  * 2 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 64-by-64 grid
  * 10000 random distinct points in a 128-by-128 grid
==> passed

Test 3b: insert random points; check get() with random query points
  * 2 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 16-by-16 grid
  * 1000 random general points in a 64-by-64 grid
  * 10000 random general points in a 128-by-128 grid
==> passed

Test 4a: insert random distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==> passed

Test 4b: insert random points; check nearest() with random query points
  * 10 random general points in a 4-by-4 grid
  * 15 random general points in a 8-by-8 grid
  * 20 random general points in a 16-by-16 grid
  * 100 random general points in a 32-by-32 grid
  * 10000 random general points in a 65536-by-65536 grid
==> passed

Test 5a: insert n random distinct points and call points()
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 128-by-128 grid
  * 1000 random distinct points in a 1024-by-1024 grid
==> passed

Test 5b: insert n random points and call points()
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 1000 random general points in a 16-by-16 grid
  * 1000 random general points in a 128-by-128 grid
  * 1000 random general points in a 1024-by-1024 grid
==> passed

Test 6a: insert random distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 6b: insert random points; check range() with random query rectangles
  * 2 random general points and random rectangles in a 2-by-2 grid
  * 10 random general points and random rectangles in a 4-by-4 grid
  * 20 random general points and random rectangles in a 8-by-8 grid
  * 100 random general points and random rectangles in a 16-by-16 grid
  * 1000 random general points and random rectangles in a 64-by-64 grid
  * 10000 random general points and random rectangles in a 128-by-128 grid
==> passed

Test 7: check with no points
 * size() and isEmpty()
 * points()
 * contains()
 * get()
 * nearest()
 * range()
==> passed

Test 8: call methods with null arguments
  * either argument to put() is null
  * argument to get() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9: check intermixed sequence of calls to put(), isEmpty(), size(),
        get(), contains(), range(), nearest(), and points() with
        probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
==> passed

Test 10: check that two PointST objects can be created at the same time
==> passed


Total: 16/16 tests passed!


================================================================
Testing correctness of KdTreeST
*-----------------------------------------------------------
Running 36 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
  * input25.txt
  * input50.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
    - failed after inserting point 3 of 5
    - student   size()    = 3
    - reference size()    = 2
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  1.0 0.0
      B  1.0 1.0
      C  1.0 1.0

  * 10 random general points in a 4-by-4 grid
    - failed after inserting point 4 of 10
    - student   size()    = 4
    - reference size()    = 3
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.0 1.0
      B  0.0 0.75
      C  0.5 0.25
      D  0.5 0.25

  * 50 random general points in a 8-by-8 grid
    - failed after inserting point 10 of 50
    - student   size()    = 10
    - reference size()    = 9
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.25 0.125
      B  1.0 0.0
      C  0.0 0.0
      D  0.375 0.0
      E  0.625 0.75
      F  0.0 1.0
      G  0.375 0.5
      H  1.0 0.625
      I  0.125 0.5
      J  0.375 0.5

  * 100000 random general points in a 16-by-16 grid
    - failed after inserting point 12 of 100000
    - student   size()    = 12
    - reference size()    = 11
    - student   isEmpty() = false
    - reference isEmpty() = false
    - sequence of points inserted: 
      A  0.4375 0.375
      B  0.875 0.3125
      C  0.5625 0.875
      D  0.375 0.5625
      E  0.125 0.3125
      F  0.0625 0.125
      G  0.125 0.8125
      H  0.125 0.0
      I  0.4375 0.8125
      J  0.75 0.0625
      K  0.625 0.9375
      L  0.0625 0.125

  * 100000 random general points in a 128-by-128 grid
    - failed after inserting point 26 of 100000
    - student   size()    = 26
    - reference size()    = 25
    - student   isEmpty() = false
    - reference isEmpty() = false

  * 100000 random general points in a 1024-by-1024 grid
    - failed after inserting point 1596 of 100000
    - student   size()    = 1596
    - reference size()    = 1595
    - student   isEmpty() = false
    - reference isEmpty() = false

==> FAILED

Test 2a: insert points from file; check points()
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check points()
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 1000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check points()
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 128-by-128 grid
  * 1000 random distinct points in a 1024-by-1024 grid
  * 1000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check points()
  * 5 random general points in a 1-by-1 grid
    - mismatch after 3 points are inserted
    - student   points(): A C C 
    - reference points(): A C 
    - sequence of points inserted: 
      A  1.0 1.0
      B  0.0 0.0
      C  0.0 0.0

  * 10 random general points in a 4-by-4 grid
    - mismatch after 2 points are inserted
    - student   points(): B B 
    - reference points(): B 
    - sequence of points inserted: 
      A  0.5 0.0
      B  0.5 0.0

  * 20 random general points in a 8-by-8 grid
    - mismatch after 16 points are inserted
    - student   points(): A F B K H C J P D L M P E I G O 
    - reference points(): A F B K H C J P D L M E I G O 
    - sequence of points inserted: 
      A  0.125 1.0
      B  0.875 0.75
      C  0.75 0.625
      D  0.75 0.0
      E  1.0 0.0
      F  0.0 0.125
      G  1.0 0.375
      H  0.0 1.0
      I  0.875 0.0
      J  0.875 1.0
      K  0.0 0.0
      L  0.625 0.75
      M  1.0 1.0
      N  0.375 0.625
      O  1.0 0.125
      P  0.375 0.625

  * 1000 random general points in a 16-by-16 grid
    - mismatch after 14 points are inserted
    - student   points(): A B C F H D G N I K E N J L 
    - reference points(): A B C F H D G N I K E J L 
    - sequence of points inserted: 
      A  0.0 0.6875
      B  0.5625 0.875
      C  0.875 0.625
      D  0.875 0.375
      E  0.9375 0.5625
      F  0.5625 0.9375
      G  0.5 0.875
      H  0.25 0.5625
      I  0.8125 0.5
      J  0.1875 0.25
      K  0.3125 0.5625
      L  0.3125 0.1875
      M  0.8125 0.9375
      N  0.8125 0.9375

  * 1000 random general points in a 128-by-128 grid
    - mismatch after 153 points are inserted
    - student   points(): A K B Q C F C W G D M X U O E I P X G K U F L B J S ...
    - reference points(): A K B Q C F C W G D M X U O E I P X G K U F L B J S ...
    - number of student   entries = 153
    - number of reference entries = 152
    - entry 146 of the two sequences are not equal
    - student   entry 146 = (0.125, 0.5625)
    - reference entry 146 = (0.203125, 0.890625)


  * 1000 random general points in a 1024-by-1024 grid
==> FAILED

Test 3a: insert points from file; check contains() with random query points
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 2 of 10000
    - query point          = (1.0, 0.25)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  0.75 0.0
      B  1.0 0.0
      C  1.0 0.75
      D  1.0 0.5
      E  0.0 0.75
      F  0.0 0.5
      G  1.0 0.25
      H  0.0 1.0
      I  0.0 0.0
      J  0.25 0.5

  * 20 random distinct points in a 8-by-8 grid
    - failed on trial 46 of 10000
    - query point          = (0.875, 0.875)
    - student   contains() = false
    - reference contains() = true
    - sequence of points inserted: 
      A  0.875 0.125
      B  0.625 0.0
      C  1.0 0.375
      D  1.0 0.25
      E  1.0 0.5
      F  0.875 0.0
      G  1.0 0.125
      H  1.0 0.75
      I  0.875 0.875
      J  0.625 0.375
      K  0.375 0.875
      L  0.25 0.75
      M  0.5 0.375
      N  0.0 0.5
      O  0.375 0.625
      P  0.25 0.875
      Q  0.75 0.125
      R  0.75 0.875
      S  0.0 0.125
      T  0.625 0.75

  * 10000 random distinct points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point          = (0.78125, 0.890625)
    - student   contains() = false
    - reference contains() = true

  * 100000 random distinct points in a 1024-by-1024 grid
    - failed on trial 9 of 10000
    - query point          = (0.6884765625, 0.5732421875)
    - student   contains() = false
    - reference contains() = true

  * 100000 random distinct points in a 65536-by-65536 grid
==> FAILED

Test 3d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
    - failed on trial 10 of 10000
    - query point          = (1.0, 0.0)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point          = (0.0, 0.8125)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 5 of 10000
    - query point          = (0.6328125, 0.1796875)
    - student   contains() = false
    - reference contains() = true

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 434 of 10000
    - query point          = (0.9375, 0.8974609375)
    - student   contains() = false
    - reference contains() = true

==> FAILED

Test 4a: insert points from file; check get() with random query points
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check get() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 4c: insert distinct points; check get() with random query points
  * 2 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
    - failed on trial 2 of 10000
    - query point     = (0.25, 1.0)
    - student   get() = null
    - reference get() = H
    - sequence of points inserted: 
      A  1.0 0.75
      B  0.5 1.0
      C  0.25 0.25
      D  0.75 0.0
      E  0.5 0.0
      F  0.25 0.5
      G  0.25 0.0
      H  0.25 1.0
      I  0.5 0.75
      J  0.75 1.0

  * 20 random distinct points in a 8-by-8 grid
    - failed on trial 5 of 10000
    - query point     = (0.625, 0.5)
    - student   get() = null
    - reference get() = L
    - sequence of points inserted: 
      A  0.0 0.875
      B  0.125 0.375
      C  0.875 0.125
      D  0.25 0.25
      E  0.5 0.625
      F  0.25 0.625
      G  0.625 0.75
      H  0.375 0.125
      I  0.0 0.0
      J  0.625 0.375
      K  0.0 0.75
      L  0.625 0.5
      M  0.625 1.0
      N  1.0 0.75
      O  0.125 0.25
      P  1.0 0.125
      Q  0.125 0.75
      R  0.75 1.0
      S  0.5 1.0
      T  0.875 0.875

  * 100 random distinct points in a 16-by-16 grid
    - failed on trial 11 of 10000
    - query point     = (0.0, 0.5)
    - student   get() = null
    - reference get() = X

  * 1000 random distinct points in a 64-by-64 grid
    - failed on trial 9 of 10000
    - query point     = (0.40625, 0.671875)
    - student   get() = null
    - reference get() = Z

  * 10000 random distinct points in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query point     = (0.6796875, 0.8203125)
    - student   get() = null
    - reference get() = S

==> FAILED

Test 4d: insert general points; check get() with random query points
  * 10000 random general points in a 1-by-1 grid
    - failed on trial 1 of 10000
    - query point     = (0.0, 1.0)
    - student   get() = B
    - reference get() = H

  * 10000 random general points in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query point     = (0.375, 0.1875)
    - student   get() = null
    - reference get() = W

  * 10000 random general points in a 128-by-128 grid
    - failed on trial 2 of 10000
    - query point     = (0.5546875, 0.2734375)
    - student   get() = null
    - reference get() = O

  * 10000 random general points in a 1024-by-1024 grid
    - failed on trial 191 of 10000
    - query point     = (0.2353515625, 0.716796875)
    - student   get() = null
    - reference get() = Q

==> FAILED

Test 5a: insert points from file; check range() with random query rectangles
  * input1.txt
  * input5.txt
  * input10.txt
    - failed on trial 1 of 10000
    - query rectangle = [0.211, 0.853] x [0.0, 0.384]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student   range():  G 
    - reference range():  G J 

==> FAILED

Test 5b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.638671875, 0.73828125] x [0.447265625, 0.7353515625]
    - student   range():  X W 
    - reference range():  X A T V U E K W W X I Y 

  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.2090911865234375, 0.5211334228515625] x [0.2767181396484375, 0.935394287109375]
    - student   range():  C L G S U Z Z 
    - reference range():  C M L O Z C C L C I V Q V F I B T S U Q X C Q S Z G ...

==> FAILED

Test 5c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 1.0] x [0.0, 1.0]
    - sequence of points inserted: 
      A  1.0 0.5
      B  0.5 0.5
    - student   range():  A 
    - reference range():  A B 

  * 10 random distinct points and random rectangles in a 4-by-4 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 1.0] x [0.25, 1.0]
    - sequence of points inserted: 
      A  0.75 0.0
      B  0.0 0.75
      C  1.0 0.5
      D  0.5 0.25
      E  0.5 0.5
      F  0.75 1.0
      G  0.75 0.75
      H  1.0 0.75
      I  0.0 0.0
      J  0.25 1.0
    - student   range():  B C 
    - reference range():  B D E J C F G H 

  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.125, 0.8125] x [0.0625, 0.3125]
    - student   range():  H 
    - reference range():  H K V H G S S A W O U M P P Y L P O E F S D 

  * 1000 random distinct points and random rectangles in a 64-by-64 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.171875, 0.25] x [0.53125, 0.8125]
    - student   range():  P 
    - reference range():  P Q C P Y V X R W S Z N H S E S P W V E I R V J V L ...

  * 10000 random distinct points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.078125, 0.3125] x [0.171875, 0.984375]
    - student   range():  L T S 
    - reference range():  L D O Q M F B X F X G L J C U N E U S E J S H W K U ...

==> FAILED

Test 5d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 1.0] x [1.0, 1.0]
    - student   range():  F 
    - reference range():  F E B 

  * 5000 random general points and random rectangles in a 16-by-16 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.0, 0.0625] x [0.6875, 1.0]
    - student   range():  U 
    - reference range():  U A G H Q S B B S I I Y 

  * 5000 random general points and random rectangles in a 128-by-128 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.03125, 0.125] x [0.125, 0.4296875]
    - student   range():  H 
    - reference range():  H J S I M M M I W F F J E Y E D P K N E I J Z N S R ...

  * 5000 random general points and random rectangles in a 1024-by-1024 grid
    - failed on trial 1 of 10000
    - query rectangle = [0.37109375, 0.892578125] x [0.322265625, 1.0]
    - student   range():  A 
    - reference range():  A B X M O P T S W C D B C M P I H A I K C L V O Q I ...

==> FAILED

Test 5e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 6a: insert points from file; check range() with random query rectangles
         and check traversal of k-d tree
  * input5.txt
    - student range() returns correct set of points
    - student   range():  B 
    - reference range():  B 
    - performs incorrect traversal of k-d tree during call to range()
    - query rectangle = [0.12, 0.84] x [0.33, 0.43]
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student k-d tree nodes involved in calls to Point2D methods:
      A B E 
    - reference k-d tree nodes involved in calls to Point2D methods:
      A B C D E 
    - failed on trial 5 of 1000

  * input10.txt
    - student range() returns wrong set of points
    - student   range():  A 
    - reference range():  A C E 
    - performs incorrect traversal of k-d tree during call to range()
    - query rectangle = [0.02, 0.78] x [0.44, 0.61]
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student k-d tree nodes involved in calls to Point2D methods:
      A 
    - reference k-d tree nodes involved in calls to Point2D methods:
      A C D E F B H I 
    - failed on trial 2 of 1000

==> FAILED

Test 6b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of k-d tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
    - student range() returns correct set of points
    - student   range():  A 
    - reference range():  A 
    - performs incorrect traversal of k-d tree during call to range()
    - query rectangle = [0.25, 0.75] x [0.25, 1.0]
    - sequence of points inserted: 
      A  0.5 0.5
      B  1.0 0.0
      C  0.0 0.75
    - student k-d tree nodes involved in calls to Point2D methods:
      A 
    - reference k-d tree nodes involved in calls to Point2D methods:
      A C B 
    - failed on trial 1 of 1000

  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
    - student range() returns wrong set of points
    - student   range():  A 
    - reference range():  A F 
    - performs incorrect traversal of k-d tree during call to range()
    - query rectangle = [0.125, 1.0] x [0.0, 0.625]
    - sequence of points inserted: 
      A  0.5 0.125
      B  0.875 0.875
      C  0.75 0.75
      D  0.625 1.0
      E  0.0 0.5
      F  0.25 0.375
    - student k-d tree nodes involved in calls to Point2D methods:
      A 
    - reference k-d tree nodes involved in calls to Point2D methods:
      A E F B C 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
    - student range() returns wrong set of points
    - student   range():  H D 
    - reference range():  H D E 
    - performs incorrect traversal of k-d tree during call to range()
    - query rectangle = [0.5625, 0.9375] x [0.125, 0.625]
    - sequence of points inserted: 
      A  0.125 0.25
      B  1.0 0.375
      C  0.375 0.6875
      D  0.875 0.5
      E  0.8125 0.4375
      F  0.0 0.5625
      G  0.1875 0.875
      H  0.625 0.1875
      I  0.4375 0.3125
      J  0.25 0.0625
    - student k-d tree nodes involved in calls to Point2D methods:
      A B H C D 
    - reference k-d tree nodes involved in calls to Point2D methods:
      A B H I J C D E 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
    - student range() returns wrong set of points
    - student   range():  B D 
    - reference range():  B P M D F K L N Q I T 
    - performs incorrect traversal of k-d tree during call to range()
    - query rectangle = [0.03125, 0.96875] x [0.21875, 0.75]
    - sequence of points inserted: 
      A  0.3125 0.9375
      B  0.125 0.34375
      C  0.0 0.90625
      D  0.71875 0.375
      E  0.84375 0.875
      F  0.5 0.3125
      G  0.09375 0.03125
      H  0.59375 0.125
      I  0.90625 0.4375
      J  0.40625 0.15625
      K  0.6875 0.25
      L  0.8125 0.5625
      M  0.15625 0.53125
      N  0.46875 0.625
      O  0.78125 0.0
      P  0.0625 0.28125
      Q  0.625 0.59375
      R  1.0 0.0625
      S  0.28125 0.1875
      T  0.875 0.40625
    - student k-d tree nodes involved in calls to Point2D methods:
      A B D 
    - reference k-d tree nodes involved in calls to Point2D methods:
      A B G P S C M D F J H K E L N Q I T 
    - failed on trial 6 of 1000

  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
    - student range() returns wrong set of points
    - student   range():  L 
    - reference range():  L D R U V Z 
    - performs incorrect traversal of k-d tree during call to range()
    - query rectangle = [0.578125, 1.0] x [0.140625, 0.671875]
    - number of entries in student   solution: 6
    - number of entries in reference solution: 12
    - 6 missing entries in student solution, including:
      '(0.640625, 0.65625)'

    - failed on trial 1 of 1000

==> FAILED

Test 7a: insert points from file; check nearest() with random query points
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 7b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 30 random non-degenerate points in a 64-by-64 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 7c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==> passed

Test 7d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 8a: insert points from file; check nearest() with random query points
         and check traversal of k-d tree
  * input5.txt
    - student   nearest() = (0.2, 0.3)
    - reference nearest() = (0.2, 0.3)
    - performs incorrect traversal of k-d tree during call to nearest()
    - query point = (0.35, 0.11)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of k-d tree nodes involved in calls to Point2D methods:
      B A C D E 
    - reference sequence of k-d tree nodes involved in calls to Point2D methods:
      A B C 
    - failed on trial 1 of 1000

  * input10.txt
    - student   nearest() = (0.144, 0.179)
    - reference nearest() = (0.144, 0.179)
    - performs incorrect traversal of k-d tree during call to nearest()
    - query point = (0.21, 0.05)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of k-d tree nodes involved in calls to Point2D methods:
      C A D E F B G J H I 
    - reference sequence of k-d tree nodes involved in calls to Point2D methods:
      A C D E 
    - failed on trial 1 of 1000

==> FAILED

Test 8b: insert non-degenerate points; check nearest() with random query points
         and check traversal of k-d tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (0.125, 0.0)
    - reference nearest() = (0.125, 0.0)
    - performs incorrect traversal of k-d tree during call to nearest()
    - query point = (0.5, 0.125)
    - sequence of points inserted: 
      A  0.125 0.0
      B  0.25 1.0
      C  0.375 0.75
      D  1.0 0.375
      E  0.875 0.5
    - student sequence of k-d tree nodes involved in calls to Point2D methods:
      B A C D E 
    - reference sequence of k-d tree nodes involved in calls to Point2D methods:
      A B C D E 
    - failed on trial 1 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.0, 0.4375)
    - reference nearest() = (0.0, 0.4375)
    - performs incorrect traversal of k-d tree during call to nearest()
    - query point = (0.0625, 0.625)
    - sequence of points inserted: 
      A  0.375 0.9375
      B  0.625 0.25
      C  0.3125 1.0
      D  0.0 0.4375
      E  0.25 0.75
      F  0.9375 0.1875
      G  0.875 0.3125
      H  0.5625 0.5
      I  0.4375 0.875
      J  1.0 0.0625
    - student sequence of k-d tree nodes involved in calls to Point2D methods:
      C A D E B F J G H I 
    - reference sequence of k-d tree nodes involved in calls to Point2D methods:
      A C D E 
    - failed on trial 1 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.34375, 0.84375)
    - reference nearest() = (0.34375, 0.84375)
    - performs incorrect traversal of k-d tree during call to nearest()
    - query point = (0.40625, 0.8125)
    - sequence of points inserted: 
      A  1.0 1.0
      B  0.46875 0.46875
      C  0.75 0.65625
      D  0.28125 0.53125
      E  0.09375 0.78125
      F  0.125 0.34375
      G  0.875 0.28125
      H  0.53125 0.625
      I  0.625 0.40625
      J  0.3125 0.375
      K  0.34375 0.84375
      L  0.0625 0.90625
      M  0.15625 0.5625
      N  0.96875 0.09375
      O  0.1875 0.71875
      P  0.6875 0.5
      Q  0.84375 0.6875
      R  0.71875 0.125
      S  0.25 0.21875
      T  0.8125 0.25
    - student sequence of k-d tree nodes involved in calls to Point2D methods:
      B A C D E H K O M L P Q F G N R S T I J 
    - reference sequence of k-d tree nodes involved in calls to Point2D methods:
      A B C D E H K O 
    - failed on trial 1 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.484375, 0.140625)
    - reference nearest() = (0.484375, 0.140625)
    - performs incorrect traversal of k-d tree during call to nearest()
    - number of student   entries = 30
    - number of reference entries = 10
    - entry 0 of the two sequences are not equal
    - student   entry 0 = (0.734375, 0.8125)
    - reference entry 0 = (0.96875, 0.671875)

    - failed on trial 1 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.25, 0.90625)
    - reference nearest() = (0.25, 0.90625)
    - performs incorrect traversal of k-d tree during call to nearest()
    - number of student   entries = 50
    - number of reference entries = 7
    - entry 0 of the two sequences are not equal
    - student   entry 0 = (0.2734375, 0.71875)
    - reference entry 0 = (0.390625, 0.421875)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.3916015625, 0.04638671875)
    - reference nearest() = (0.3916015625, 0.04638671875)
    - performs incorrect traversal of k-d tree during call to nearest()
    - number of student   entries = 1000
    - number of reference entries = 10
    - entry 0 of the two sequences are not equal
    - student   entry 0 = (0.6787109375, 0.71728515625)
    - reference entry 0 = (0.34130859375, 0.36328125)

    - failed on trial 1 of 1000

==> FAILED

Test 9: check with no points
  * size() and isEmpty()
  * points()
  * contains()
  * get()
  * nearest()
  * range()
==> passed

Test 10: check that the specified exception is thrown with null arguments
  * either argument to put() is null
  * argument to get() is null
    - throws wrong exception when calling get() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

  * argument to contains() is null
    - throws wrong exception when calling contains() with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

  * argument to range() is null
  * argument to nearest() is null
==> FAILED

Test 11: check with points and rectangles whose x- and y-coordinates
         are outside unit square
  * size() and isEmpty()
  * points()
  * contains()
  * get()
    - failed on trial 9 of 10000
    - query point     = (-256.0, -128.0)
    - student   get() = null
    - reference get() = F

  * nearest()
  * range()
    - failed on trial 1 of 10000
    - query rectangle = [-768.0, -128.0] x [-128.0, 256.0]
    - student   range():  J C 
    - reference range():  J S H S U C D 

==> FAILED

Test 12a: check intermixed sequence of calls to put(), isEmpty(), size(),
          get(), contains(), range(), nearest(), and points() with
          probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 29 of 20000
    - rectangle = [0.4765625, 0.7734375] x [0.0390625, 0.4375]
    - student   range():  G 
    - reference range():  G P 

  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 46 of 20000
    - rectangle = [0.0458984375, 0.828125] x [0.5126953125, 0.966796875]
    - student   range():  A 
    - reference range():  A E J E 

  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 47 of 20000
    - rectangle = [0.26171875, 0.9249267578125] x [0.26416015625, 0.421875]
    - student   range():  B 
    - reference range():  B E N 

  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 10 of 20000
    - rectangle = [0.2335357666015625, 0.765106201171875] x [0.3939971923828125, 0.9935760498046875]
    - student   range():  A 
    - reference range():  A G 
    - sequence of operations was:
           st.put((0.332275390625, 0.8998870849609375), "A")
           st.nearest((0.4157257080078125, 0.180816650390625))   ==>  (0.332275390625, 0.8998870849609375)
           st.isEmpty()  ==>  false
           st.get((0.384918212890625, 0.2918701171875))     ==>  null
           st.put((0.19976806640625, 0.2056121826171875), "E")
           st.contains((0.44342041015625, 0.352264404296875))  ==>  false
           st.put((0.2346954345703125, 0.4869842529296875), "G")
           st.nearest((0.1024932861328125, 0.450592041015625))   ==>  (0.2346954345703125, 0.4869842529296875)
           st.get((0.0356597900390625, 0.8147735595703125))     ==>  null
           st.range([0.2335357666015625, 0.765106201171875] x [0.3939971923828125, 0.9935760498046875])  ==>  A 

==> FAILED

Test 12b: check intermixed sequence of calls to put(), isEmpty(), size(),
          get(), contains(), range(), nearest(), and points() with
          probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 12 of 20000
    - rectangle = [0.375, 1.0] x [0.8125, 0.9375]
    - student   range():  B 
    - reference range():  B C 
    - sequence of operations was:
           st.put((0.0, 0.3125), "A")
           st.put((0.75, 0.8125), "B")
           st.put((0.4375, 0.875), "C")
           st.put((1.0, 0.75), "D")
           st.nearest((0.5625, 0.125))   ==>  (0.0, 0.3125)
           st.nearest((0.625, 1.0))   ==>  (0.75, 0.8125)
           st.range([0.375, 0.75] x [0.25, 0.4375])  ==>  empty
           st.put((0.1875, 0.25), "H")
           st.nearest((0.625, 0.4375))   ==>  (0.75, 0.8125)
           st.put((1.0, 0.25), "J")
           st.put((0.0, 0.875), "K")
           st.range([0.375, 1.0] x [0.8125, 0.9375])  ==>  B 

  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 29 of 20000
    - rectangle = [0.25, 0.5078125] x [0.234375, 0.515625]
    - student   range():  J 
    - reference range():  J Y 

  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 14 of 20000
    - rectangle = [0.0048828125, 0.4892578125] x [0.0244140625, 0.943359375]
    - student   range():  J 
    - reference range():  J M 
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.put((0.318359375, 0.9482421875), "B")
           st.nearest((0.2294921875, 0.015625))   ==>  (0.318359375, 0.9482421875)
           st.range([0.03515625, 0.8994140625] x [0.677734375, 0.775390625])  ==>  empty
           st.range([0.3662109375, 0.5771484375] x [0.376953125, 0.74609375])  ==>  empty
           st.put((0.724609375, 0.5498046875), "F")
           st.points()   ==>  B F 
           st.range([0.646484375, 0.8046875] x [0.3232421875, 0.7314453125])  ==>  F 
           st.size()     ==>  2
           st.put((0.0224609375, 0.4326171875), "J")
           st.points()   ==>  B J F 
           st.nearest((1.0, 0.0439453125))   ==>  (0.724609375, 0.5498046875)
           st.put((0.1630859375, 0.080078125), "M")
           st.range([0.0048828125, 0.4892578125] x [0.0244140625, 0.943359375])  ==>  J 

  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 50 of 20000
    - rectangle = [0.147216796875, 0.9959716796875] x [0.4447021484375, 0.6748046875]
    - student   range():  T P 
    - reference range():  T V P V 

  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 68 of 20000
    - rectangle = [0.2658233642578125, 0.8595733642578125] x [0.43182373046875, 0.9211273193359375]
    - student   range():  E 
    - reference range():  E V Z S E 

==> FAILED

Test 12c: check intermixed sequence of calls to put(), isEmpty(), size(),
          get(), contains(), range(), nearest(), and points() with
          probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 15 of 20000
    - rectangle = [0.0, 1.0] x [0.0, 1.0]
    - student   range():  M 
    - reference range():  M I J 
    - sequence of operations was:
           st.put((0.0, 1.0), "A")
           st.range([0.0, 0.0] x [0.0, 0.0])  ==>  empty
           st.nearest((1.0, 0.0))   ==>  (0.0, 1.0)
           st.isEmpty()  ==>  false
           st.range([0.0, 1.0] x [0.0, 0.0])  ==>  empty
           st.nearest((0.0, 1.0))   ==>  (0.0, 1.0)
           st.points()   ==>  A 
           st.contains((1.0, 1.0))  ==>  false
           st.put((1.0, 0.0), "I")
           st.put((0.0, 0.0), "J")
           st.range([1.0, 1.0] x [0.0, 1.0])  ==>  I 
           st.put((0.0, 1.0), "L")
           st.put((0.0, 1.0), "M")
           st.nearest((0.0, 1.0))   ==>  (0.0, 1.0)
           st.range([0.0, 1.0] x [0.0, 1.0])  ==>  M 

  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 14 of 20000
    - rectangle = [0.5, 1.0] x [0.0625, 0.625]
    - student   range():  D 
    - reference range():  D H 
    - sequence of operations was:
           st.isEmpty()  ==>  true
           st.put((0.0, 0.375), "B")
           st.get((0.0625, 0.125))     ==>  null
           st.put((0.6875, 0.375), "D")
           st.points()   ==>  B D 
           st.points()   ==>  B D 
           st.nearest((0.4375, 1.0))   ==>  (0.6875, 0.375)
           st.put((0.9375, 0.3125), "H")
           st.put((1.0, 0.75), "I")
           st.get((0.9375, 0.25))     ==>  null
           st.isEmpty()  ==>  false
           st.nearest((0.0, 1.0))   ==>  (0.0, 0.375)
           st.nearest((0.8125, 1.0))   ==>  (1.0, 0.75)
           st.range([0.5, 1.0] x [0.0625, 0.625])  ==>  D 

  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 15 of 20000
    - rectangle = [0.7578125, 0.953125] x [0.1328125, 0.6953125]
    - student   range():  A 
    - reference range():  A K 
    - sequence of operations was:
           st.put((0.9140625, 0.4296875), "A")
           st.contains((0.421875, 0.3515625))  ==>  false
           st.range([0.3984375, 0.9921875] x [0.125, 0.3359375])  ==>  empty
           st.put((0.3203125, 0.03125), "D")
           st.contains((0.265625, 0.734375))  ==>  false
           st.put((0.8828125, 0.0625), "F")
           st.range([0.5390625, 0.890625] x [0.4296875, 0.75])  ==>  empty
           st.put((0.1015625, 0.609375), "H")
           st.contains((0.21875, 0.921875))  ==>  false
           st.nearest((0.7265625, 0.6953125))   ==>  (0.9140625, 0.4296875)
           st.put((0.796875, 0.546875), "K")
           st.range([0.3984375, 0.5] x [0.4609375, 0.9765625])  ==>  empty
           st.get((0.6796875, 0.390625))     ==>  null
           st.put((0.375, 0.109375), "N")
           st.range([0.7578125, 0.953125] x [0.1328125, 0.6953125])  ==>  A 

  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 51 of 20000
    - rectangle = [0.115234375, 0.6982421875] x [0.4111328125, 0.76953125]
    - student   range():  K 
    - reference range():  K T 

  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 11 of 20000
    - rectangle = [0.1239013671875, 0.852294921875] x [0.257080078125, 0.966064453125]
    - student   range():  C 
    - reference range():  C I 
    - sequence of operations was:
           st.put((0.3614501953125, 0.1131591796875), "A")
           st.isEmpty()  ==>  false
           st.put((0.7342529296875, 0.7520751953125), "C")
           st.range([0.62841796875, 0.910888671875] x [0.254638671875, 0.8037109375])  ==>  C 
           st.nearest((0.5196533203125, 0.676025390625))   ==>  (0.7342529296875, 0.7520751953125)
           st.nearest((0.6947021484375, 0.0107421875))   ==>  (0.3614501953125, 0.1131591796875)
           st.range([0.033447265625, 0.585693359375] x [0.0533447265625, 0.2830810546875])  ==>  A 
           st.range([0.4339599609375, 0.771728515625] x [0.4791259765625, 0.5675048828125])  ==>  empty
           st.put((0.6494140625, 0.8935546875), "I")
           st.put((0.729736328125, 0.1942138671875), "J")
           st.range([0.1239013671875, 0.852294921875] x [0.257080078125, 0.966064453125])  ==>  C 

  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
    - failed on trial 40 of 20000
    - rectangle = [0.2270355224609375, 0.7572021484375] x [0.184844970703125, 0.7630157470703125]
    - student   range():  Q 
    - reference range():  Q M 

==> FAILED

Test 13: insert n random points into two different KdTreeST objects;
        check that repeated calls to size(), get(), range(), nearest(),
        and points() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 17/36 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of PointST
*-----------------------------------------------------------
Running 8 total tests.

Memory of Point2D object = 32 bytes

Memory usage of a PointST with n points (including Point2D objects).
Maximum allowed memory is 96n + 232 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          208                288
=> passed        2          304                384
=> passed        5          592                672
=> passed       10         1072               1152
=> passed       25         2512               2592
=> passed      100         9712               9792
=> passed      400        38512              38592
=> passed      800        76912              76992
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 112.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 192.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTreeST
*-----------------------------------------------------------
Running 8 total tests.

Memory of Point2D object = 32 bytes
Memory of RectHV object = 48 bytes

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          240                240
=> passed        2          384                384
=> passed        5          816                816
=> passed       10         1536               1536
=> passed       25         3696               3696
=> passed      100        14496              14496
=> passed      400        57696              57696
=> passed      800       115296             115296
==> 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 144.00 n + 96.00  (R^2 = 1.000)
Reference memory (bytes) = 144.00 n + 96.00  (R^2 = 1.000)

================================================================




