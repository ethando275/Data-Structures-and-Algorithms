

netid => ed8205
assignment => Kd_Tree
file01 => @/n/fs/tigerfile/Files/COS226_S2023/Kd_Tree/submissions/cd1c0c5d92190236d3f1a7710e4221ef/readme.txt;filename=20230327103436/readme.txt
file02 => @/n/fs/tigerfile/Files/COS226_S2023/Kd_Tree/submissions/cd1c0c5d92190236d3f1a7710e4221ef/PointST.java;filename=20230327191401/PointST.java
file03 => @/n/fs/tigerfile/Files/COS226_S2023/Kd_Tree/submissions/cd1c0c5d92190236d3f1a7710e4221ef/KdTreeST.java;filename=20230327204752/KdTreeST.java
The following files were submitted:
----------------------------------
  11K Mar 27 20:47 KdTreeST.java
 4.5K Mar 27 19:14 PointST.java
 3.7K Mar 27 10:34 readme.txt


*** The acknowledgments.txt file has NOT been submitted.***
*** This assessment will NOT be graded until the acknowledgments.txt file is submitted.***


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac PointST.java
*-----------------------------------------------------------

% javac KdTreeST.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
PointST:

KdTreeST:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% spotbugs *.class
*-----------------------------------------------------------
M C NP_NULL_ON_SOME_PATH NP: Dereferences the variable 'current', but its value might be null on some execution branch.  Dereferenced at KdTreeST.java:[line 92]
M D RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT RV: Calls the method 'distanceSquaredTo()' but ignores its return value. The method, however, does not produce any effect other than returning a value.  At KdTreeST.java:[line 217]
SpotBugs ends with 2 warnings.


================================================================


% pmd .
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] KdTreeST.java:265:32: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:266:32: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:266:37: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:268:35: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:269:32: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:269:36: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:275:72: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:276:64: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
[WARN] KdTreeST.java:276:71: Use at least one digit to the left of the decimal point. For example, use the literal '0.5' instead of '.5'. [FloatingPointLiteral]
Checkstyle ends with 0 errors and 9 warnings.

% custom checkstyle checks for PointST.java
*-----------------------------------------------------------
Checkstyle ends with 1 errors.
[ERROR] PointST.java:70: Do not create more than one redâ€“black BST in this program. [Performance]
[WARN] PointST.java:70:54: Do not call 'RedBlackBST()' in 'range()'. Inserting n keys into an initially empty red-black BST takes n log n time. [Performance]
Checkstyle ends with 1 error and 1 warning.

% custom checkstyle checks for KdTreeST.java
*-----------------------------------------------------------

% custom checkstyle checks for readme.txt
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of PointST
*-----------------------------------------------------------
Running 16 total tests.

In the tests below, we consider two classes of points.
  * Distinct points: no two points have same x- and y-coordinates
  * General points:  no restrictions on the x- or y-coordinates of the points

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert n random distinct points; check size() and isEmpty() after each insertion
  * 2 random distinct points in a 1-by-1 grid
  * 64 random distinct points in a 8-by-8 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 128-by-128 grid
  * 5000 random distinct points in a 1024-by-1024 grid
  * 50000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1b: insert n random points; check size() and isEmpty() after each insertion
         (size may be less than n because of duplicates)
  * 5 random general points in a 1-by-1 grid
  * 50 random general points in a 8-by-8 grid
  * 100 random general points in a 16-by-16 grid
  * 1000 random general points in a 128-by-128 grid
  * 5000 random general points in a 1024-by-1024 grid
  * 50000 random general points in a 65536-by-65536 grid
==> passed

Test 2a: insert n random distinct points; check contains() with random query points
  * 2 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2b: insert n random points; check contains() with random query points
  * 1 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 10000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
  * 100000 random general points in a 65536-by-65536 grid
==> passed

Test 3a: insert random distinct points; check get() with random query points
  * 2 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 64-by-64 grid
  * 10000 random distinct points in a 128-by-128 grid
==> passed

Test 3b: insert random points; check get() with random query points
  * 2 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 16-by-16 grid
  * 1000 random general points in a 64-by-64 grid
  * 10000 random general points in a 128-by-128 grid
==> passed

Test 4a: insert random distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==> passed

Test 4b: insert random points; check nearest() with random query points
  * 10 random general points in a 4-by-4 grid
  * 15 random general points in a 8-by-8 grid
  * 20 random general points in a 16-by-16 grid
  * 100 random general points in a 32-by-32 grid
  * 10000 random general points in a 65536-by-65536 grid
==> passed

Test 5a: insert n random distinct points and call points()
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 128-by-128 grid
  * 1000 random distinct points in a 1024-by-1024 grid
==> passed

Test 5b: insert n random points and call points()
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 1000 random general points in a 16-by-16 grid
  * 1000 random general points in a 128-by-128 grid
  * 1000 random general points in a 1024-by-1024 grid
==> passed

Test 6a: insert random distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 6b: insert random points; check range() with random query rectangles
  * 2 random general points and random rectangles in a 2-by-2 grid
  * 10 random general points and random rectangles in a 4-by-4 grid
  * 20 random general points and random rectangles in a 8-by-8 grid
  * 100 random general points and random rectangles in a 16-by-16 grid
  * 1000 random general points and random rectangles in a 64-by-64 grid
  * 10000 random general points and random rectangles in a 128-by-128 grid
==> passed

Test 7: check with no points
 * size() and isEmpty()
 * points()
 * contains()
 * get()
 * nearest()
 * range()
==> passed

Test 8: call methods with null arguments
  * either argument to put() is null
  * argument to get() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 9: check intermixed sequence of calls to put(), isEmpty(), size(),
        get(), contains(), range(), nearest(), and points() with
        probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 10000 calls with random points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 10000 calls with random points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
==> passed

Test 10: check that two PointST objects can be created at the same time
==> passed


Total: 16/16 tests passed!


================================================================
Testing correctness of KdTreeST
*-----------------------------------------------------------
Running 36 total tests.

In the tests below, we consider three classes of points and rectangles.

  * Non-degenerate points: no two points (or rectangles) share either an
                           x-coordinate or a y-coordinate

  * Distinct points:       no two points (or rectangles) share both an
                           x-coordinate and a y-coordinate

  * General points:        no restrictions on the x-coordinates or y-coordinates
                           of the points (or rectangles)

A point in an m-by-m grid means that it is of the form (i/m, j/m),
where i and j are integers between 0 and m (inclusive).

Test 1a: insert points from file; check size() and isEmpty() after each insertion
  * input0.txt
  * input1.txt
  * input5.txt
  * input10.txt
  * input25.txt
  * input50.txt
==> passed

Test 1b: insert non-degenerate points; check size() and isEmpty() after each insertion
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 50000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 1c: insert distinct points; check size() and isEmpty() after each insertion
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 1d: insert general points; check size() and isEmpty() after each insertion
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 50 random general points in a 8-by-8 grid
  * 100000 random general points in a 16-by-16 grid
  * 100000 random general points in a 128-by-128 grid
  * 100000 random general points in a 1024-by-1024 grid
==> passed

Test 2a: insert points from file; check points()
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 2b: insert non-degenerate points; check points()
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 50 random non-degenerate points in a 128-by-128 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 1000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 2c: insert distinct points; check points()
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 128-by-128 grid
  * 1000 random distinct points in a 1024-by-1024 grid
  * 1000 random distinct points in a 65536-by-65536 grid
==> passed

Test 2d: insert general points; check points()
  * 5 random general points in a 1-by-1 grid
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 1000 random general points in a 16-by-16 grid
  * 1000 random general points in a 128-by-128 grid
  * 1000 random general points in a 1024-by-1024 grid
==> passed

Test 3a: insert points from file; check contains() with random query points
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 3b: insert non-degenerate points; check contains() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 3c: insert distinct points; check contains() with random query points
  * 1 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 10000 random distinct points in a 128-by-128 grid
  * 100000 random distinct points in a 1024-by-1024 grid
  * 100000 random distinct points in a 65536-by-65536 grid
==> passed

Test 3d: insert general points; check contains() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 4a: insert points from file; check get() with random query points
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 4b: insert non-degenerate points; check get() with random query points
  * 1 random non-degenerate points in a 1-by-1 grid
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 500 random non-degenerate points in a 1024-by-1024 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 4c: insert distinct points; check get() with random query points
  * 2 random distinct points in a 1-by-1 grid
  * 10 random distinct points in a 4-by-4 grid
  * 20 random distinct points in a 8-by-8 grid
  * 100 random distinct points in a 16-by-16 grid
  * 1000 random distinct points in a 64-by-64 grid
  * 10000 random distinct points in a 128-by-128 grid
==> passed

Test 4d: insert general points; check get() with random query points
  * 10000 random general points in a 1-by-1 grid
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 5a: insert points from file; check range() with random query rectangles
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 5b: insert non-degenerate points; check range() with random query rectangles
  * 1 random non-degenerate points and random rectangles in a 2-by-2 grid
  * 5 random non-degenerate points and random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and random rectangles in a 32-by-32 grid
  * 500 random non-degenerate points and random rectangles in a 1024-by-1024 grid
  * 10000 random non-degenerate points and random rectangles in a 65536-by-65536 grid
==> passed

Test 5c: insert distinct points; check range() with random query rectangles
  * 2 random distinct points and random rectangles in a 2-by-2 grid
  * 10 random distinct points and random rectangles in a 4-by-4 grid
  * 20 random distinct points and random rectangles in a 8-by-8 grid
  * 100 random distinct points and random rectangles in a 16-by-16 grid
  * 1000 random distinct points and random rectangles in a 64-by-64 grid
  * 10000 random distinct points and random rectangles in a 128-by-128 grid
==> passed

Test 5d: insert general points; check range() with random query rectangles
  * 5000 random general points and random rectangles in a 2-by-2 grid
  * 5000 random general points and random rectangles in a 16-by-16 grid
  * 5000 random general points and random rectangles in a 128-by-128 grid
  * 5000 random general points and random rectangles in a 1024-by-1024 grid
==> passed

Test 5e: insert random points; check range() with tiny rectangles
         enclosing each point
  * 5 tiny rectangles and 5 general points in a 2-by-2 grid
  * 10 tiny rectangles and 10 general points in a 4-by-4 grid
  * 20 tiny rectangles and 20 general points in a 8-by-8 grid
  * 5000 tiny rectangles and 5000 general points in a 128-by-128 grid
  * 5000 tiny rectangles and 5000 general points in a 1024-by-1024 grid
  * 5000 tiny rectangles and 5000 general points in a 65536-by-65536 grid
==> passed

Test 6a: insert points from file; check range() with random query rectangles
         and check traversal of k-d tree
  * input5.txt
  * input10.txt
==> passed

Test 6b: insert non-degenerate points; check range() with random query rectangles
         and check traversal of k-d tree
  * 3 random non-degenerate points and 1000 random rectangles in a 4-by-4 grid
  * 6 random non-degenerate points and 1000 random rectangles in a 8-by-8 grid
  * 10 random non-degenerate points and 1000 random rectangles in a 16-by-16 grid
  * 20 random non-degenerate points and 1000 random rectangles in a 32-by-32 grid
  * 30 random non-degenerate points and 1000 random rectangles in a 64-by-64 grid
==> passed

Test 7a: insert points from file; check nearest() with random query points
  * input1.txt
  * input5.txt
  * input10.txt
==> passed

Test 7b: insert non-degenerate points; check nearest() with random query points
  * 5 random non-degenerate points in a 8-by-8 grid
  * 10 random non-degenerate points in a 16-by-16 grid
  * 20 random non-degenerate points in a 32-by-32 grid
  * 30 random non-degenerate points in a 64-by-64 grid
  * 10000 random non-degenerate points in a 65536-by-65536 grid
==> passed

Test 7c: insert distinct points; check nearest() with random query points
  * 10 random distinct points in a 4-by-4 grid
  * 15 random distinct points in a 8-by-8 grid
  * 20 random distinct points in a 16-by-16 grid
  * 100 random distinct points in a 32-by-32 grid
  * 10000 random distinct points in a 65536-by-65536 grid
==> passed

Test 7d: insert general points; check nearest() with random query points
  * 10000 random general points in a 16-by-16 grid
  * 10000 random general points in a 128-by-128 grid
  * 10000 random general points in a 1024-by-1024 grid
==> passed

Test 8a: insert points from file; check nearest() with random query points
         and check traversal of k-d tree
  * input5.txt
    - student   nearest() = (0.9, 0.6)
    - reference nearest() = (0.9, 0.6)
    - performs incorrect traversal of k-d tree during call to nearest()
    - query point = (0.76, 0.54)
    - sequence of points inserted: 
      A  0.7 0.2
      B  0.5 0.4
      C  0.2 0.3
      D  0.4 0.7
      E  0.9 0.6
    - student sequence of k-d tree nodes involved in calls to Point2D methods:
      A E B C D 
    - reference sequence of k-d tree nodes involved in calls to Point2D methods:
      A E B D 
    - failed on trial 9 of 1000

  * input10.txt
    - student   nearest() = (0.32, 0.708)
    - reference nearest() = (0.32, 0.708)
    - performs incorrect traversal of k-d tree during call to nearest()
    - query point = (0.42, 0.84)
    - sequence of points inserted: 
      A  0.372 0.497
      B  0.564 0.413
      C  0.226 0.577
      D  0.144 0.179
      E  0.083 0.51
      F  0.32 0.708
      G  0.417 0.362
      H  0.862 0.825
      I  0.785 0.725
      J  0.499 0.208
    - student sequence of k-d tree nodes involved in calls to Point2D methods:
      A B H I C D E F 
    - reference sequence of k-d tree nodes involved in calls to Point2D methods:
      A B H I C F 
    - failed on trial 1 of 1000

==> FAILED

Test 8b: insert non-degenerate points; check nearest() with random query points
         and check traversal of k-d tree
  * 5 random non-degenerate points in a 8-by-8 grid
    - student   nearest() = (1.0, 0.75)
    - reference nearest() = (1.0, 0.75)
    - performs slightly incorrect traversal of k-d tree during call to nearest()
    - performs the update-the-champion update before the pruning test
    - it should perform the pruning test first
    - failed on trial 6 of 1000

  * 10 random non-degenerate points in a 16-by-16 grid
    - student   nearest() = (0.125, 0.75)
    - reference nearest() = (0.125, 0.75)
    - performs incorrect traversal of k-d tree during call to nearest()
    - query point = (0.0625, 0.625)
    - sequence of points inserted: 
      A  0.9375 0.6875
      B  0.0 0.8125
      C  0.125 0.75
      D  0.875 0.5
      E  0.5625 0.3125
      F  0.625 0.0
      G  0.3125 0.875
      H  0.4375 0.9375
      I  0.5 1.0
      J  0.8125 0.5625
    - student sequence of k-d tree nodes involved in calls to Point2D methods:
      A B C D E J 
    - reference sequence of k-d tree nodes involved in calls to Point2D methods:
      A B C D J 
    - failed on trial 50 of 1000

  * 20 random non-degenerate points in a 32-by-32 grid
    - student   nearest() = (0.25, 0.15625)
    - reference nearest() = (0.25, 0.15625)
    - performs incorrect traversal of k-d tree during call to nearest()
    - query point = (0.3125, 0.21875)
    - sequence of points inserted: 
      A  0.59375 0.875
      B  0.71875 0.625
      C  0.8125 0.40625
      D  0.53125 0.46875
      E  0.46875 0.71875
      F  0.25 0.15625
      G  0.21875 1.0
      H  0.4375 0.96875
      I  0.90625 0.8125
      J  0.65625 0.0625
      K  0.15625 0.9375
      L  1.0 0.34375
      M  0.125 0.1875
      N  0.9375 0.90625
      O  0.1875 0.125
      P  0.09375 0.25
      Q  0.84375 0.5625
      R  0.78125 0.0
      S  0.6875 0.78125
      T  0.5 0.65625
    - student sequence of k-d tree nodes involved in calls to Point2D methods:
      A D F M O P 
    - reference sequence of k-d tree nodes involved in calls to Point2D methods:
      A D F M P O 
    - failed on trial 2 of 1000

  * 30 random non-degenerate points in a 64-by-64 grid
    - student   nearest() = (0.8125, 0.359375)
    - reference nearest() = (0.8125, 0.359375)
    - performs incorrect traversal of k-d tree during call to nearest()
    - number of student   entries = 14
    - number of reference entries = 11
    - entry 10 of the two sequences are not equal
    - student   entry 10 = (0.53125, 0.5625)
    - reference entry 10 = (0.921875, 0.671875)

    - failed on trial 2 of 1000

  * 50 random non-degenerate points in a 128-by-128 grid
    - student   nearest() = (0.296875, 0.515625)
    - reference nearest() = (0.296875, 0.515625)
    - performs incorrect traversal of k-d tree during call to nearest()
    - number of student   entries = 12
    - number of reference entries = 11
    - entry 10 of the two sequences are not equal
    - student   entry 10 = (0.359375, 0.25)
    - reference entry 10 = (0.3359375, 0.71875)

    - failed on trial 1 of 1000

  * 1000 random non-degenerate points in a 2048-by-2048 grid
    - student   nearest() = (0.703125, 0.92626953125)
    - reference nearest() = (0.703125, 0.92626953125)
    - performs incorrect traversal of k-d tree during call to nearest()
    - number of student   entries = 24
    - number of reference entries = 22
    - entry 20 of the two sequences are not equal
    - student   entry 20 = (0.61572265625, 0.91748046875)
    - reference entry 20 = (0.68212890625, 0.88720703125)

    - failed on trial 3 of 1000

==> FAILED

Test 9: check with no points
  * size() and isEmpty()
  * points()
  * contains()
  * get()
  * nearest()
  * range()
==> passed

Test 10: check that the specified exception is thrown with null arguments
  * either argument to put() is null
  * argument to get() is null
  * argument to contains() is null
  * argument to range() is null
  * argument to nearest() is null
==> passed

Test 11: check with points and rectangles whose x- and y-coordinates
         are outside unit square
  * size() and isEmpty()
  * points()
  * contains()
  * get()
  * nearest()
  * range()
==> passed

Test 12a: check intermixed sequence of calls to put(), isEmpty(), size(),
          get(), contains(), range(), nearest(), and points() with
          probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 20000 calls with non-degenerate points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with non-degenerate points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with non-degenerate points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with non-degenerate points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with non-degenerate points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with non-degenerate points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
==> passed

Test 12b: check intermixed sequence of calls to put(), isEmpty(), size(),
          get(), contains(), range(), nearest(), and points() with
          probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 20000 calls with distinct points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with distinct points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with distinct points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with distinct points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with distinct points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with distinct points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
==> passed

Test 12c: check intermixed sequence of calls to put(), isEmpty(), size(),
          get(), contains(), range(), nearest(), and points() with
          probabilities (p1, p2, p3, p4, p5, p6, p7, p8), respectively
  * 20000 calls with general points in a 1-by-1 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with general points in a 16-by-16 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with general points in a 128-by-128 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with general points in a 1024-by-1024 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with general points in a 8192-by-8192 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
  * 20000 calls with general points in a 65536-by-65536 grid
    and probabilities (0.3, 0.05, 0.05, 0.05, 0.1, 0.2, 0.2, 0.05)
==> passed

Test 13: insert n random points into two different KdTreeST objects;
        check that repeated calls to size(), get(), range(), nearest(),
        and points() with the same arguments yield same results
  * 10 random general points in a 4-by-4 grid
  * 20 random general points in a 8-by-8 grid
  * 100 random general points in a 128-by-128 grid
  * 1000 random general points in a 65536-by-65536 grid
==> passed


Total: 34/36 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of PointST
*-----------------------------------------------------------
Running 8 total tests.

Memory of Point2D object = 32 bytes

Memory usage of a PointST with n points (including Point2D objects).
Maximum allowed memory is 96n + 232 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          208                288
=> passed        2          304                384
=> passed        5          592                672
=> passed       10         1072               1152
=> passed       25         2512               2592
=> passed      100         9712               9792
=> passed      400        38512              38592
=> passed      800        76912              76992
==> 8/8 tests passed

Total: 8/8 tests passed!

Estimated student   memory (bytes) = 96.00 n + 112.00  (R^2 = 1.000)
Estimated reference memory (bytes) = 96.00 n + 192.00  (R^2 = 1.000)

================================================================



Analyzing memory of KdTreeST
*-----------------------------------------------------------
Running 8 total tests.

Memory of Point2D object = 32 bytes
Memory of RectHV object = 48 bytes

Memory usage of a KdTree with n points (including Point2D and RectHV objects).
Maximum allowed memory is 312n + 192 bytes.

                 n       student (bytes)    reference (bytes)
--------------------------------------------------------------
=> passed        1          240                240
=> passed        2          384                384
=> passed        5          816                816
=> passed       10         1536               1536
=> passed       25         3696               3696
=> passed      100        14496              14496
=> passed      400        57696              57696
=> passed      800       115296             115296
==> 8/8 tests passed

Total: 8/8 tests passed!

Student   memory (bytes) = 144.00 n + 96.00  (R^2 = 1.000)
Reference memory (bytes) = 144.00 n + 96.00  (R^2 = 1.000)

================================================================




